{
  "paragraphs": [
    {
      "text": "%spark.conf\n\n# It is strongly recommended to set SPARK_HOME explictly instead of using the embedded spark of Zeppelin. As the function of embedded spark of Zeppelin is limited and can only run in local mode.\nSPARK_HOME /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2\n\n#spark.jars /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2/plugins/rapids-4-spark_2.12-0.2.0.jar, /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2/plugins/cudf-0.15-cuda10-1.jar\n\n#spark.sql.warehouse.dir /home/ometaxas/Programs/zeppelin-0.9.0-preview2-bin-all/spark-warehouse\n\nspark.serializer org.apache.spark.serializer.KryoSerializer\nspark.kryoserializer.buffer.max 1000M\nspark.driver.memory 100g\nspark.driver.maxResultSize 5g \n\n#spark.rapids.sql.concurrentGpuTasks\u003d2\n#spark.rapids.sql.enabled true\n#spark.rapids.memory.pinnedPool.size 2G \n\n#spark.plugins com.nvidia.spark.SQLPlugin \n\n#spark.locality.wait 0s \n#spark.sql.files.maxPartitionBytes 512m \n#spark.sql.shuffle.partitions 100 \n#spark.executor.resource.gpu.amount\u003d1\n\n\nSPARK_LOCAL_DIRS /media/ometaxas/nvme/spark, /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2/tmp\n                                             \n# /home/ometaxas/Programs/spark-3.0.1-bin-hadoop3.2/tmp,/media/datadisk/Datasets/Spark\n#,/media/datadisk/Datasets/Spark \n#/media/datadisk/Datasets/Spark\n\n# set executor memrory 110g\n# spark.executor.memory  60g\n\n\n# set executor number to be 6\n# spark.executor.instances  6\n\n\n# Uncomment the following line if you want to use yarn-cluster mode (It is recommended to use yarn-cluster mode after Zeppelin 0.8, as the driver will run on the remote host of yarn cluster which can mitigate memory pressure of zeppelin server)\n# master yarn-cluster\n\n# Uncomment the following line if you want to use yarn-client mode (It is not recommended to use it after 0.8. Because it would launch the driver in the same host of zeppelin server which will increase memory pressure of zeppelin server)\n# master yarn-client\n\n# Uncomment the following line to enable HiveContext, and also put hive-site.xml under SPARK_CONF_DIR\n# zeppelin.spark.useHiveContext true",
      "user": "anonymous",
      "dateUpdated": "2021-01-04 14:57:11.425",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605800359478_1421580216",
      "id": "paragraph_1605800359478_1421580216",
      "dateCreated": "2020-11-19 17:39:19.478",
      "dateStarted": "2021-01-04 14:57:11.447",
      "dateFinished": "2021-01-04 14:57:11.464",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nimport org.apache.commons.lang3.StringUtils\nimport java.util.Locale;\n\nval shortNormName \u003d udf[String, String]((e:String) \u003d\u003e {\n    \n    val normname \u003d org.apache.commons.lang3.StringUtils.stripAccents(e.toLowerCase(Locale.ENGLISH))\n    //.replaceAll(\"[^\\\\p{ASCII}]\", \"\")\n     .replaceAll(\"[\u003c\u003e:´,’./\\\\\u0027\\\\\\\";(){}!@#$%^\u0026+‐–*\\\\\\\\-]+\", \"\")\n    .replaceAll(\"Æ\", \"AE\")\n    .replaceAll(\"Ð\", \"D\")\n    .replaceAll(\"Ø\", \"O\")\n    .replaceAll(\"Þ\", \"TH\")\n    .replaceAll(\"ß\", \"ss\")\n    .replaceAll(\"ð\", \"d\")\n    .replaceAll(\"æ\", \"ae\")\n    .replaceAll(\"ø\", \"o\")\n    .replaceAll(\"þ\", \"th\")\n    .replaceAll(\"Œ\", \"OE\")\n    .replaceAll(\"œ\", \"oe\")\n    .replaceAll(\"ƒ\", \"f\")\n\t.trim().split(\" \")\n    \n\n val shortName \u003d  if (normname.length \u003d\u003d 1) normname(0) else normname(0).take(1) + normname(normname.length-1)\n shortName\n\n    \n})\n\nspark.udf.register(\"shortNormName\", shortNormName)\n\nval normName \u003d udf[String, String]((e:String) \u003d\u003e {\n    \n org.apache.commons.lang3.StringUtils.stripAccents(e.toLowerCase(Locale.ENGLISH))\n     .replaceAll(\"[ \u003c\u003e:´,’./\\\\\u0027\\\\\\\";(){}!@#$%^\u0026+‐–*\\\\\\\\-]+\", \"\")\n    .replaceAll(\"Æ\", \"AE\")\n    .replaceAll(\"Ð\", \"D\")\n    .replaceAll(\"Ø\", \"O\")\n    .replaceAll(\"Þ\", \"TH\")\n    .replaceAll(\"ß\", \"ss\")\n    .replaceAll(\"ð\", \"d\")\n    .replaceAll(\"æ\", \"ae\")\n    .replaceAll(\"ø\", \"o\")\n    .replaceAll(\"þ\", \"th\")\n    .replaceAll(\"Œ\", \"OE\")\n    .replaceAll(\"œ\", \"oe\")\n    .replaceAll(\"ƒ\", \"f\")\n\t.trim()\n    \n})\n\nspark.udf.register(\"normName\", normName)\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-22 12:01:43.468",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.commons.lang3.StringUtils\nimport java.util.Locale\n\u001b[1m\u001b[34mshortNormName\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.UserDefinedFunction\u001b[0m \u003d SparkUserDefinedFunction($Lambda$2057/0x00007f7ebd0ef040@7e06e6b8,StringType,List(Some(class[value[0]: string])),None,true,true)\n\u001b[1m\u001b[34mnormName\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.UserDefinedFunction\u001b[0m \u003d SparkUserDefinedFunction($Lambda$2148/0x00007f7ebcce9040@22a513e5,StringType,List(Some(class[value[0]: string])),None,true,true)\n\u001b[1m\u001b[34mres1\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.expressions.UserDefinedFunction\u001b[0m \u003d SparkUserDefinedFunction($Lambda$2148/0x00007f7ebcce9040@22a513e5,StringType,List(Some(class[value[0]: string])),None,true,true)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606722812184_1774544506",
      "id": "paragraph_1606722812184_1774544506",
      "dateCreated": "2020-11-30 09:53:32.184",
      "dateStarted": "2020-12-22 12:01:43.476",
      "dateFinished": "2020-12-22 12:01:52.193",
      "status": "FINISHED"
    },
    {
      "title": "Pre-process S2 data ",
      "text": "%spark\nval S2_HOME \u003d \"/media/datadisk/Datasets/SemanticScholar/06112020\"\nval S2_sample \u003d \"/media/datadisk/Datasets/SemanticScholar/sample/sample-S2-records.gz\"\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\n\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.spark.sql.functions.concat_ws;\nimport org.apache.spark.sql.functions.countDistinct;\nimport  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer;\nimport java.util.Locale;\nimport org.apache.spark.storage.StorageLevel;\n\n\n\nval logger: Logger \u003d LoggerFactory.getLogger(\"MyZeppelinLogger\");\nlogger.info(\"Test my logger\");\n\n\n//Get Semantic Scholar articles \nval S2articlesdf \u003d spark.read.json(s\"file://$S2_HOME\")\n//val S2articlesdf \u003d spark.read.json(s\"file://$S2_sample\")\n//S2articlesdf.printSchema\n//S2articlesdf.show(5) \n\nval S2subsetdf \u003d S2articlesdf\n             //.join(broadcast(doisdf), lower(S2articlesdf(\"doi\"))\u003d\u003d\u003ddoisdf(\"doi\"), \"inner\")\n             //.filter(($\"magId\" \u003d!\u003d \"\") \u0026\u0026 ($\"magId\".isNotNull))\n             .select($\"title\", $\"id\",lower(S2articlesdf(\"doi\")).as(\"doi\"), $\"magId\", $\"fieldsOfStudy\".as(\"S2fos\"), $\"pmid\".as(\"pmId\"), $\"authors\")\n             \n//S2subsetdf.show(10)\n\n//Create pub - author rows\nval S2flatdf \u003d S2subsetdf.select($\"title\", $\"id\", $\"doi\", $\"magId\", $\"pmId\", $\"S2fos\", explode($\"authors\").as(\"authorsflat\"))\n\nval S2_Pub_Authors \u003d S2flatdf.select($\"title\".as(\"S2title\"), $\"id\".as(\"S2paperId\"), lower($\"doi\").as(\"S2doi\"), $\"S2fos\", $\"magId\", $\"pmId\", $\"authorsflat.name\".as(\"S2name\"),concat_ws(\"\",$\"authorsflat.ids\").as(\"S2authorId\"),\n                                    shorNormName($\"authorsflat.name\").as(\"S2shortNormName\"),normName( $\"authorsflat.name\").as(\"S2normName\"))\n//.persist(StorageLevel.DISK_ONLY)\n//.cache()\n\n//S2_Pub_Authors.printSchema\n//S2_Pub_Authors.show(5)\n\n//println(\"S2_Author_Pub_Cnt:\" + S2_Pub_Authors.count())\nS2_Pub_Authors.write.mode(\"overwrite\").parquet(\"/media/datadisk/Datasets/MAG_S2/S2_Pub_Authors.parquet\")\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-30 09:59:31.130",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mS2_HOME\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m \u003d /media/datadisk/Datasets/SemanticScholar/06112020\n\u001b[1m\u001b[34mS2_sample\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m \u003d /media/datadisk/Datasets/SemanticScholar/sample/sample-S2-records.gz\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.apache.spark.sql.functions.concat_ws\nimport org.apache.spark.sql.functions.countDistinct\nimport org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer\nimport java.util.Locale\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605873396623_1631414645",
      "id": "paragraph_1605873396623_1631414645",
      "dateCreated": "2020-11-20 13:56:36.624",
      "dateStarted": "2020-11-27 19:59:35.379",
      "dateFinished": "2020-11-27 23:05:00.998",
      "status": "FINISHED"
    },
    {
      "title": "Pre-process MAG Data",
      "text": "%spark\n\n\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\n\n// Specify schema for your csv file\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.spark.sql.functions.concat_ws;\nimport org.apache.spark.sql.functions.countDistinct;\n//import  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer;\nimport java.util.Locale;\nimport org.apache.spark.storage.StorageLevel;\nimport java.util.Calendar;\n\n//org.apache.commons.lang3.StringUtils.stripAccents(input.toLowerCase(Locale.ENGLISH));\n\nval logger: Logger \u003d LoggerFactory.getLogger(\"MyZeppelinLogger\");\nlogger.info(\"Test my logger\");\n\n\n//Get MAG AUthor - Pub pairs\nval MAG_HOME \u003d \"/media/datadisk/Datasets/MAG/20201109/mag\"\nval MAG_ADV \u003d  \"/media/datadisk/Datasets/MAG/20201109/advanced\"\nval paperAuthorsAffTsvFilename \u003d \"PaperAuthorAffiliations.txt\"\nval authorsAffTsvFilename \u003d \"Authors.txt\"\nval papersTsvFilename \u003d \"Papers.txt\"\n\n\nval paperAuthorAffSchema \u003d new StructType().\n                add(\"paperId\", LongType, false).\n                add(\"authorId\", LongType, false).                \n                add(\"affiliationId\", LongType, true).\n                add(\"authorSequenceNumber\",IntegerType, true).\n                add(\"originalAuthor\", StringType, true).\n                add(\"originalAffiliation\", StringType, true)\n\n                \nval paperAuthorAffdf \u003d spark.read.options(Map(\"sep\"-\u003e\"\\t\", \"header\"-\u003e \"false\")).\n                schema(paperAuthorAffSchema).\n                csv(s\"file://$MAG_HOME/$paperAuthorsAffTsvFilename\")\n                \n                \nval authorSchema \u003d new StructType().\n                add(\"authorId\", LongType, false).\n                add(\"rank\", LongType, true).                \n                add(\"normalizedName\", StringType, true).\n                add(\"displayName\",StringType, true).\n                add(\"lastKnownAffiliationId\", LongType, true).\n                add(\"paperCount\", LongType, true).\n                add(\"paperFamilyCount\", LongType, true).\n                add(\"citationCount\", LongType, true).\n                add(\"createdDate\", DateType, true)\n                \n\n                \nval authordf \u003d spark.read.options(Map(\"sep\"-\u003e\"\\t\", \"header\"-\u003e \"false\")).\n                schema(authorSchema).\n                csv(s\"file://$MAG_HOME/$authorsAffTsvFilename\")\n\nval paperSchema \u003d new StructType().\n    add(\"paperId\", LongType, false).\n    add(\"magRank\", IntegerType, true).\n    add(\"doi\", StringType, true).\n    add(\"docTypetmp\", StringType, true).\n    add(\"normalizedTitle\", StringType, true).\n    add(\"title\", StringType, false).\n    add(\"bookTitle\", StringType, true).\n    add(\"pubYear\", IntegerType, true).\n    add(\"pubDate\", StringType, true).\n    add(\"onlineDate\", StringType, true).\n    add(\"publisherName\", StringType, true).\n    add(\"journalId\", StringType, true).\n    add(\"conferenceSeriesId\", LongType, true).\n    add(\"conferenceInstancesId\", LongType, true).\n    add(\"volume\", StringType, true).\n    add(\"issue\", StringType, true).\n    add(\"firstPage\", StringType, true).\n    add(\"lastPage\", StringType, true).\n    add(\"referenceCount\", LongType, true).\n    add(\"citationCount\", LongType, true).\n    add(\"estimatedCitation\", LongType, true).\n    add(\"originalVenue\", StringType, true).\n    add(\"familyId\", StringType, true).\n    add(\"createdDate\", DateType, true)\n    \nval papersdf \u003d spark.read.options(Map(\"sep\"-\u003e\"\\t\", \"header\"-\u003e \"false\")).\n              schema(paperSchema).\n             csv(s\"file://$MAG_HOME/$papersTsvFilename\")\n\nval paperAuthorsExtdf \u003d paperAuthorAffdf\n                        .join(authordf, paperAuthorAffdf(\"authorId\")\u003d\u003d\u003dauthordf(\"authorId\"), \"inner\")\n                        .select(paperAuthorAffdf(\"authorId\").as(\"MAGauthorId\"),paperAuthorAffdf(\"paperId\").as(\"MAGpaperId\"),authordf(\"normalizedName\").as(\"MAGnormName\") , $\"affiliationId\",\n                          authordf(\"displayName\") as \"MAGname\", normName(authordf(\"normalizedName\")).as(\"normName\"), shortNormName(authordf(\"normalizedName\")).as(\"shortNormName\"))\n                        .persist(StorageLevel.DISK_ONLY)\n\npaperAuthorsExtdf.show(5)\n//println(\"paperAuthorsExtdf:\"+paperAuthorsExtdf.count())\nprintln(\"paperAuthorsExtdf completed \"+ Calendar.getInstance().getTime())                        \n\nval paperAuthorGrpAffdf \u003d paperAuthorsExtdf\n                .groupBy($\"MAGpaperId\", $\"MAGauthorId\", $\"MAGname\", $\"MAGnormName\",  $\"normName\", $\"shortNormName\")\n                .agg( collect_set(paperAuthorAffdf(\"affiliationId\")).as(\"affiliationIds\"))\n                .persist(StorageLevel.DISK_ONLY)\n                \nprintln(\"paperAuthorGrpAffdf completed \"+ Calendar.getInstance().getTime())\n                \n\n\n                      \nval authorsPerPaperdf \u003d   paperAuthorsExtdf\n                          .groupBy(paperAuthorsExtdf(\"MAGpaperId\"))\n                          .agg( collect_set($\"MAGauthorId\").as(\"authorIds\"), collect_list($\"normName\").as(\"authorNormNames\"), collect_list($\"shortNormName\").as(\"authorShortNormNames\"))\n                          .persist(StorageLevel.DISK_ONLY)\n\nauthorsPerPaperdf.show(5)\n//println(\"authorsPerPaperdf:\"+authorsPerPaperdf.count())\nprintln(\"authorsPerPaperdf completed \"+ Calendar.getInstance().getTime())                        \n                        \n//authorsPerPaperdf.write.parquet(\"/media/datadisk/Datasets/MAG_S2/authorsPerPaperdf.parquet\")\n  \n  \nval fieldsOfStudyTsvFilename \u003d \"FieldsOfStudy.txt\"\nval paperFieldsOfStudyTsvFilename \u003d \"PaperFieldsOfStudy.txt\"\nval fieldOfStudyChildrenTsvFilename \u003d  \"FieldOfStudyChildren.txt\"\n\n\n\nval paperFieldsOfStudyschema \u003d new StructType().\n                add(\"paperId\", LongType, false).\n                add(\"fieldsOfStudyId\", LongType, false).\n                add(\"score\", DoubleType, true)\n                \nval paperFieldsOfStudydf \u003d spark.read.options(Map(\"sep\"-\u003e\"\\t\", \"header\"-\u003e \"false\")).\n                schema(paperFieldsOfStudyschema).\n                csv(s\"file://$MAG_ADV/$paperFieldsOfStudyTsvFilename\")\n//paperFieldsOfStudydf.printSchema\n//paperFieldsOfStudydf.show(5)\n\n//Enrich with FoS (lvl0, lvl1 and other)\n\nval fieldsOfStudyschema \u003d new StructType().\n                add(\"fieldsOfStudyId\", LongType, false).\n                add(\"magRank\", IntegerType, true).\n                add(\"normalizedName\", StringType, true).\n                add(\"name\", StringType, true).\n                add(\"mainType\", StringType, true).\n                add(\"level\", IntegerType, true).\n                add(\"paperCount\", LongType, true).\n                add(\"paperFamilyCount\", LongType, true).\n                add(\"citationCount\", LongType, true).\n                add(\"createdDate\", DateType, true)\n                \nval fieldsOfStudydf \u003d spark.read.options(Map(\"sep\"-\u003e\"\\t\", \"header\"-\u003e \"false\")).\n                schema(fieldsOfStudyschema).\n                csv(s\"file://$MAG_ADV/$fieldsOfStudyTsvFilename\")\n\nval fieldOfStudyChildrenschema \u003d new StructType().\n                add(\"fieldOfStudyId\", LongType, false).\n                add(\"childFieldOfStudyId\", LongType, false)\n                \n                \nval fieldOfStudyChildrendf \u003d spark.read.options(Map(\"sep\"-\u003e\"\\t\", \"header\"-\u003e \"false\")).\n                schema(fieldOfStudyChildrenschema).\n                csv(s\"file://$MAG_ADV/$fieldOfStudyChildrenTsvFilename\")\n\n//val fos_lvl0 \u003d fieldsOfStudydf.filter($\"level\"\u003d\u003d\u003d0).show()\n\n//val fos_lvl1 \u003d fieldsOfStudydf.filter($\"level\"\u003d\u003d\u003d1).show()\n\n\nval paper_fos \u003d paperFieldsOfStudydf.join(broadcast(fieldsOfStudydf), paperFieldsOfStudydf(\"fieldsOfStudyId\")\u003d\u003d\u003d fieldsOfStudydf(\"fieldsOfStudyId\"), \"inner\")\n                .groupBy(paperFieldsOfStudydf(\"paperId\").as(\"paper_fos_paperId\"))\n                .agg( \n                    //    sum(when($\"date\" \u003e \"2017-03\", $\"value\")).alias(\"value3\"),\n                    //sum(when($\"date\" \u003e \"2017-04\", $\"value\")).alias(\"value4\")\n                    collect_set(when($\"level\" \u003e 1, paperFieldsOfStudydf(\"fieldsOfStudyId\"))).as(\"fosids\"),\n                    collect_set(when($\"level\" \u003d\u003d\u003d  0, paperFieldsOfStudydf(\"fieldsOfStudyId\"))).as(\"fosids_lvl0\"),\n                    collect_set(when($\"level\" \u003d\u003d\u003d  1, paperFieldsOfStudydf(\"fieldsOfStudyId\"))).as(\"fosids_lvl1\")\n                    )\n                    .persist(StorageLevel.DISK_ONLY)\n\npaper_fos.show(5)\n//println(\"authorsPerPaperdf:\"+authorsPerPaperdf.count())\nprintln(\"paper_fos completed \"+ Calendar.getInstance().getTime())                        \n\nval MAG_pub_authorsdf \u003d paperAuthorGrpAffdf\n              //.join(broadcast(doisdf), lower(papersdf(\"doi\"))\u003d\u003d\u003ddoisdf(\"doi\"), \"inner\")\n              .join(papersdf, paperAuthorGrpAffdf(\"MAGpaperId\")\u003d\u003d\u003dpapersdf(\"paperId\"), \"inner\")\n              .join(paper_fos, paper_fos(\"paper_fos_paperId\")\u003d\u003d\u003d paperAuthorGrpAffdf(\"MAGpaperId\"), \"outer\")\n              .join(authorsPerPaperdf, authorsPerPaperdf(\"MAGpaperId\")\u003d\u003d\u003dpaperAuthorGrpAffdf(\"MAGpaperId\"), \"inner\")\n              .select(papersdf(\"title\").as(\"MAGtitle\"), paperAuthorGrpAffdf(\"MAGpaperId\"),lower(papersdf(\"doi\")).as(\"MAGdoi\"), paperAuthorGrpAffdf(\"MAGname\"), \n                  paperAuthorGrpAffdf(\"MAGnormName\"),  paperAuthorGrpAffdf(\"normName\"), paperAuthorGrpAffdf(\"shortNormName\"),\n                  authorsPerPaperdf(\"authorIds\"), authorsPerPaperdf(\"authorNormNames\"), authorsPerPaperdf(\"authorShortNormNames\"),\n                  paperAuthorGrpAffdf(\"MAGauthorId\"), paperAuthorGrpAffdf(\"affiliationIds\"), paper_fos(\"fosids\"), paper_fos(\"fosids_lvl0\") ,paper_fos(\"fosids_lvl1\"))\n              //.persist(StorageLevel.DISK_ONLY)\n              //.cache()\n             //.write.csv(\"relatedFoS.csv\")\n                //fieldsOfStudydf.dropDuplicates(\"mainType\").select(\"mainType\").show(200)\n\n//println(\"MAG_Author_pubCnt:\"+MAG_pub_authorsdf.count())\n\nMAG_pub_authorsdf.write.parquet(\"/media/datadisk/Datasets/MAG_S2/MAG_pub_authors.parquet\")\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-01 00:00:25.086",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----------+----------+----------------+-------------+-----------------+---------------+-------------+\n|MAGauthorId|MAGpaperId|     MAGnormName|affiliationId|          MAGname|       normName|shortNormName|\n+-----------+----------+----------------+-------------+-----------------+---------------+-------------+\n| 2054935087|  11310495|     仁志 野々村|         null|      仁志 野々村|     仁志野々村|     仁野々村|\n| 2140446045|  11311632|ana maria soares|         null| Ana Maria Soares| anamariasoares|      asoares|\n| 2308272889|  14468755| hiroyuki sakaue|         null|  Hiroyuki Sakaue| hiroyukisakaue|      hsakaue|\n| 1944443586|  14468663|nicholas r hiser|     98555331|Nicholas R. Hiser| nicholasrhiser|       nhiser|\n|  220152633|  14469614|cecilia estrabou|         null| Cecilia Estrabou|ceciliaestrabou|    cestrabou|\n+-----------+----------+----------------+-------------+-----------------+---------------+-------------+\nonly showing top 5 rows\n\npaperAuthorsExtdf completed Tue Dec 01 00:46:56 EET 2020\npaperAuthorGrpAffdf completed Tue Dec 01 00:46:56 EET 2020\n+----------+--------------------+--------------------+--------------------+\n|MAGpaperId|           authorIds|     authorNormNames|authorShortNormNames|\n+----------+--------------------+--------------------+--------------------+\n|      8075|         [208182240]|[arturomenendezal...|       [aaleyxandre]|\n|      9458|[523391756, 22224...|[johnvstpeter, jo...|[jpeter, jpeter, ...|\n|      9715|[2346949400, 2584...|[lesliekobayashi,...|[lkobayashi, gbar...|\n|      9945|        [2166725079]|        [niamhowens]|            [nowens]|\n|     14719|         [208477187]|      [norkntnintan]|           [nnintan]|\n+----------+--------------------+--------------------+--------------------+\nonly showing top 5 rows\n\nauthorsPerPaperdf completed Tue Dec 01 01:02:26 EET 2020\n+-----------------+--------------------+-----------+--------------------+\n|paper_fos_paperId|              fosids|fosids_lvl0|         fosids_lvl1|\n+-----------------+--------------------+-----------+--------------------+\n|             9458|[2777477808, 6223...|[185592680]|          [43617362]|\n|             9715|[50440223, 278086...| [71924100]|         [126322002]|\n|             9945|[73945780, 301875...|[144133560]|         [162853370]|\n|            17971|[200925200, 13636...|[127413603]|[78519656, 119599...|\n|            21342|[2780821815, 1811...|[162324750]|[106159729, 55675...|\n+-----------------+--------------------+-----------+--------------------+\nonly showing top 5 rows\n\npaper_fos completed Tue Dec 01 01:20:34 EET 2020\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.apache.spark.sql.functions.concat_ws\nimport org.apache.spark.sql.functions.countDistinct\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer\nimport java.util.Locale\nimport org.apache.spark.storage.StorageLevel\nimport java.util.Calendar\n\u001b[1m\u001b[34mlogger\u001b[0m: \u001b[1m\u001b[32morg.slf4j.Logger\u001b[0m \u003d org.slf4j.impl.Log4jLoggerAdapter(MyZeppelinLogger)\n\u001b[1m\u001b[34mMAG_HOME\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m \u003d /media/datadisk/Datasets/MAG/20201109/mag\n\u001b[1m\u001b[34mMAG_ADV\u001b[0m: \u001b[1m\u001b[32mStri...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d4"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605987015380_1074874489",
      "id": "paragraph_1605987015380_1074874489",
      "dateCreated": "2020-11-21 21:30:15.380",
      "dateStarted": "2020-12-01 00:00:25.090",
      "dateFinished": "2020-12-01 03:58:43.154",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nval MAG_pub_authorsdf \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/MAG_pub_authors.parquet\")\n\nMAG_pub_authorsdf.show(20)\nMAG_pub_authorsdf.printSchema()\nprintln(\"MAG_pub_authorsdf  cnt:\"+MAG_pub_authorsdf.count())\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-01 11:17:04.921",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------------------------+----------+--------------------+--------------------+--------------------+--------------------+--------------+--------------------+----------------------------+----------------------+-----------+--------------+--------------------+-----------+--------------------+\n|                             MAGtitle|MAGpaperId|              MAGdoi|             MAGname|         MAGnormName|            normName| shortNormName|           authorIds|             authorNormNames|  authorShortNormNames|MAGauthorId|affiliationIds|              fosids|fosids_lvl0|         fosids_lvl1|\n+-------------------------------------+----------+--------------------+--------------------+--------------------+--------------------+--------------+--------------------+----------------------------+----------------------+-----------+--------------+--------------------+-----------+--------------------+\n|                 El residente en A...|       147|                null|       Callejas Pozo|       callejas pozo|        callejaspozo|         cpozo|        [2616864840]|              [callejaspozo]|               [cpozo]| 2616864840|            []|[2778371403, 1634...| [71924100]|[159110408, 74909...|\n|                 Pierre Bourdieu: ...|       787|10.1007/978-3-663...|      Gerhard Wayand|      gerhard wayand|       gerhardwayand|       gwayand|        [2498526366]|             [gerhardwayand]|             [gwayand]| 2498526366|            []|        [2778828898]|[138885662]|          [15708023]|\n|                 Warning: home ene...|      1424|                null|         L.B. Belkin|          l b belkin|            lbbelkin|       lbelkin|        [2528570034]|                  [lbbelkin]|             [lbelkin]| 2528570034|            []|[59633683, 277735...| [39432304]|          [91375879]|\n|                 Parents and Healt...|      2424|                null|        John Balding|        john balding|         johnbalding|      jbalding|        [2568574094]|               [johnbalding]|            [jbalding]| 2568574094|            []|[10050518, 299328...| [71924100]|[509550671, 19417...|\n|                 AN APPRAISAL OF N...|      3438|                null|         G.L. Decker|          g l decker|            gldecker|       gdecker|[2641813421, 2642...|        [wbbigge, wbwilso...|  [wbigge, wwilson,...| 2641813421|            []|[186027771, 20665...|[127413603]|         [548081761]|\n|                 AN APPRAISAL OF N...|      3438|                null|          W.B. Bigge|           w b bigge|             wbbigge|        wbigge|[2641813421, 2642...|        [wbbigge, wbwilso...|  [wbigge, wwilson,...| 2651814381|            []|[186027771, 20665...|[127413603]|         [548081761]|\n|                 AN APPRAISAL OF N...|      3438|                null|         W.B. Wilson|          w b wilson|            wbwilson|       wwilson|[2641813421, 2642...|        [wbbigge, wbwilso...|  [wbigge, wwilson,...| 2642160036|            []|[186027771, 20665...|[127413603]|         [548081761]|\n|                 Copyright and Int...|      5130| 10.2139/ssrn.276333|    R. Anthony Reese|     r anthony reese|       ranthonyreese|        rreese|        [2101414356]|             [ranthonyreese]|              [rreese]| 2101414356|   [204250578]|[101780184, 27773...|[144133560]|         [199539241]|\n|                 CIENFUEGOS MATEO,...|     15812|                null|Antonio Martínez ...|antonio martinez ...|antoniomartinezpunal|        apunal|        [2693856692]|        [antoniomartinezp...|              [apunal]| 2693856692|            []|                  []| [17744445]|                  []|\n|                 Compresibilidad d...|     17582|                null| Oscar Hueso Cuberos| oscar hueso cuberos|   oscarhuesocuberos|      ocuberos|        [2725962448]|         [oscarhuesocuberos]|            [ocuberos]| 2725962448|            []|                  []|[121332964]|          [15708023]|\n|                 La investigación ...|     20727|                null| María Piedad Rangel| maria piedad rangel|   mariapiedadrangel|       mrangel|        [2323235678]|         [mariapiedadrangel]|             [mrangel]| 2323235678|            []|         [169715780]| [17744445]|          [15708023]|\n|                 Университетские б...|     23001|                null|Кузнецова Натела ...|кузнецова натела ...|кузнецованателано...|   кнодарьевна|[2727352900, 2595...|        [кузнецованателан...|  [кнодарьевна, мал...| 2727352900|            []|                null|       null|                null|\n|                 Университетские б...|     23001|                null|Морозова Светлана...|морозова светлана...|морозовасветланаа...|малександровна|[2727352900, 2595...|        [кузнецованателан...|  [кнодарьевна, мал...| 2595621631|            []|                null|       null|                null|\n|                 Analysis and Trea...|     28455|10.1007/978-3-319...|Margarita Puentes...|margarita puentes...|margaritapuentesv...|       mvargas|        [2161994760]|        [margaritapuentes...|             [mvargas]| 2161994760|    [31512782]|[44838205, 133386...|[192562407]|          [49040817]|\n|问：熟石膏粉（以下简称石膏粉）是陶...|     33854|                null|              王同言|              王同言|              王同言|        王同言|         [935995711]|                    [王同言]|              [王同言]|  935995711|            []|                null|       null|                null|\n|                 Usulan Perbaikan ...|     37602|                null| Vincent Nataprawira| vincent nataprawira|  vincentnataprawira|  vnataprawira|         [299503946]|        [vincentnataprawira]|        [vnataprawira]|  299503946|            []|        [2776128355]|[127413603]|         [112698675]|\n|                 Reflexións dun cr...|     44300|                null|Francisco Javier ...|francisco javier ...|franciscojavierel...|     fbasterra|        [2627447017]|        [franciscojaviere...|           [fbasterra]| 2627447017|            []|                  []|[142362112]|[58640448, 52119013]|\n|        PR11. 新しい動脈硬化指標CA...|     46735|                null|             智子 碇|             智子 碇|              智子碇|          智碇|[2170820563, 2635...|[敬一木村, 智子碇, 昌明原田]|[敬木村, 智碇, 昌原田]| 2042523542|            []|                null|       null|                null|\n|        PR11. 新しい動脈硬化指標CA...|     46735|                null|           敬一 木村|           敬一 木村|            敬一木村|        敬木村|[2170820563, 2635...|[敬一木村, 智子碇, 昌明原田]|[敬木村, 智碇, 昌原田]| 2170820563|            []|                null|       null|                null|\n|        PR11. 新しい動脈硬化指標CA...|     46735|                null|           昌明 原田|           昌明 原田|            昌明原田|        昌原田|[2170820563, 2635...|[敬一木村, 智子碇, 昌明原田]|[敬木村, 智碇, 昌原田]| 2635447223|            []|                null|       null|                null|\n+-------------------------------------+----------+--------------------+--------------------+--------------------+--------------------+--------------+--------------------+----------------------------+----------------------+-----------+--------------+--------------------+-----------+--------------------+\nonly showing top 20 rows\n\nroot\n |-- MAGtitle: string (nullable \u003d true)\n |-- MAGpaperId: long (nullable \u003d true)\n |-- MAGdoi: string (nullable \u003d true)\n |-- MAGname: string (nullable \u003d true)\n |-- MAGnormName: string (nullable \u003d true)\n |-- normName: string (nullable \u003d true)\n |-- shortNormName: string (nullable \u003d true)\n |-- authorIds: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n |-- authorNormNames: array (nullable \u003d true)\n |    |-- element: string (containsNull \u003d true)\n |-- authorShortNormNames: array (nullable \u003d true)\n |    |-- element: string (containsNull \u003d true)\n |-- MAGauthorId: long (nullable \u003d true)\n |-- affiliationIds: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n |-- fosids: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n |-- fosids_lvl0: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n |-- fosids_lvl1: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n\nMAG_pub_authorsdf  cnt:653044459\n\u001b[1m\u001b[34mMAG_pub_authorsdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGtitle: string, MAGpaperId: bigint ... 13 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606720793995_1499060641",
      "id": "paragraph_1606720793995_1499060641",
      "dateCreated": "2020-11-30 09:19:53.995",
      "dateStarted": "2020-12-01 11:17:04.923",
      "dateFinished": "2020-12-01 11:17:21.151",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nval MAG_pub_authorsdf \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/MAG_pub_authors.parquet\")\n\nMAG_pub_authorsdf.show(20)\nMAG_pub_authorsdf.printSchema()\nprintln(\"MAG_pub_authorsdf  cnt:\"+MAG_pub_authorsdf.count())\n\n\n\n//661546284\n//653044459\n//661546284\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-15 00:16:31.388",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------------+----------+--------------------+--------------------+--------------------+--------------------+-------------+--------------------+-------------------------------+--------------------------------+-----------+--------------+--------------------+-----------+--------------------+\n|                 MAGtitle|MAGpaperId|              MAGdoi|             MAGname|         MAGnormName|            normName|shortNormName|           authorIds|                authorNormNames|            authorShortNormNames|MAGauthorId|affiliationIds|              fosids|fosids_lvl0|         fosids_lvl1|\n+-------------------------+----------+--------------------+--------------------+--------------------+--------------------+-------------+--------------------+-------------------------------+--------------------------------+-----------+--------------+--------------------+-----------+--------------------+\n|     The significance ...|       548|                null|            Täumer L|            l taumer|             ltaumer|      ltaumer|[2700246010, 2643...|             [ltaumer, pandrik]|              [ltaumer, pandrik]| 2643747584|            []|[2992046845, 2780...| [86803240]|          [99454951]|\n|     The significance ...|       548|                null|            Andrik P|            p andrik|             pandrik|      pandrik|[2700246010, 2643...|             [ltaumer, pandrik]|              [ltaumer, pandrik]| 2700246010|            []|[2992046845, 2780...| [86803240]|          [99454951]|\n|     Design and fabric...|      3770|                null|Rickard Marcks vo...|rickard marcks vo...|rickardmarcksvonw...|  rwurtemberg|        [2730960322]|           [rickardmarcksvon...|                   [rwurtemberg]| 2730960322|            []|[6260449, 9774980...|[192562407]|[49040817, 120665...|\n|     Composted Biosoli...|      4966|                null|   Justin Lee Fisher|   justin lee fisher|     justinleefisher|      jfisher|        [2670181452]|              [justinleefisher]|                       [jfisher]| 2670181452|            []|[123157820, 29945...| [39432304]|           [6557445]|\n|     Σχεδίαση ειδικών ...|      7011|                null|Δημήτρης Νατσιόπο...|δημήτρης νατσιόπο...|δημητρηςνατσιοπουλος|δνατσιοπουλος|         [331995734]|           [δημητρηςνατσιοπο...|                 [δνατσιοπουλος]|  331995734|            []|                  []|[138885662]|          [27206212]|\n|3Da13 植物病原菌Pantoe...|     13702|                null|             宰 池田|             宰 池田|              宰池田|       宰池田|[2142681735, 2120...|[紀弘加藤, 大輝海野, 宰池田,...|[紀加藤, 大海野, 宰池田, 知諸星]| 2233474350|            []|[2908844146, 1186...| [86803240]|          [89423630]|\n|3Da13 植物病原菌Pantoe...|     13702|                null|           大輝 海野|           大輝 海野|            大輝海野|       大海野|[2142681735, 2120...|[紀弘加藤, 大輝海野, 宰池田,...|[紀加藤, 大海野, 宰池田, 知諸星]| 2166051829|            []|[2908844146, 1186...| [86803240]|          [89423630]|\n|3Da13 植物病原菌Pantoe...|     13702|                null|           知広 諸星|           知広 諸星|            知広諸星|       知諸星|[2142681735, 2120...|[紀弘加藤, 大輝海野, 宰池田,...|[紀加藤, 大海野, 宰池田, 知諸星]| 2120820156|            []|[2908844146, 1186...| [86803240]|          [89423630]|\n|3Da13 植物病原菌Pantoe...|     13702|                null|           紀弘 加藤|           紀弘 加藤|            紀弘加藤|       紀加藤|[2142681735, 2120...|[紀弘加藤, 大輝海野, 宰池田,...|[紀加藤, 大海野, 宰池田, 知諸星]| 2142681735|            []|[2908844146, 1186...| [86803240]|          [89423630]|\n|     The First Finding...|     15030|10.1023/a:1020911...|    O. G. Shevchenko|      o g shevchenko|        ogshevchenko|  oshevchenko|[2319269296, 2801...|           [ogshevchenko, ty...|            [oshevchenko, tor...| 2319269296|  [1313323035]|[115880899, 27775...|[127313418]|[18903297, 111368...|\n|     The First Finding...|     15030|10.1023/a:1020911...|       T. Yu. Orlova|         t yu orlova|           tyuorlova|      torlova|[2319269296, 2801...|           [ogshevchenko, ty...|            [oshevchenko, tor...| 2801977400|  [1313323035]|[115880899, 27775...|[127313418]|[18903297, 111368...|\n|     Insulators for Sp...|     15944|10.1016/b978-0-08...|            W.R. Ott|             w r ott|               wrott|         wott|        [2134855002]|                        [wrott]|                          [wott]| 2134855002|    [49502546]|[511840579, 13413...|[192562407]|[77595967, 159985...|\n|     El espíritu empre...|     20138|                null|Juan Andrés Gutié...|juan andres gutie...|juanandresgutierr...|     jlazpita|        [2275107372]|           [juanandresgutier...|                      [jlazpita]| 2275107372|            []|                null|       null|                null|\n|     Non-proportional ...|     21516|10.1007/978-3-642...|Hans C. van Houwe...|hans c van houwel...| hanscvanhouwelingen| hhouwelingen|[57091189, 295130...|           [paulhceilers, ha...|            [peilers, hhouwel...|   57091189|  [2800006345]|[50382708, 730009...| [33923547]|         [105795698]|\n|     Non-proportional ...|     21516|10.1007/978-3-642...|   Paul H. C. Eilers|     paul h c eilers|        paulhceilers|      peilers|[57091189, 295130...|           [paulhceilers, ha...|            [peilers, hhouwel...| 2951301646|  [2800006345]|[50382708, 730009...| [33923547]|         [105795698]|\n|     TEMPERATURE COEFF...|     34134|                null|            K. Inoue|             k inoue|              kinoue|       kinoue|[2441211773, 2572...|           [kinoue, knishimu...|            [kinoue, knishimu...| 2572582376|            []|[175113610, 18638...|[185592680]|[115704247, 17732...|\n|     TEMPERATURE COEFF...|     34134|                null|           M. Iizumi|            m iizumi|             miizumi|      miizumi|[2441211773, 2572...|           [kinoue, knishimu...|            [kinoue, knishimu...| 2700153191|            []|[175113610, 18638...|[185592680]|[115704247, 17732...|\n|     TEMPERATURE COEFF...|     34134|                null|        K. Nishimura|         k nishimura|          knishimura|   knishimura|[2441211773, 2572...|           [kinoue, knishimu...|            [kinoue, knishimu...| 2441211773|            []|[175113610, 18638...|[185592680]|[115704247, 17732...|\n|     La institución de...|     35399|                null| Rachid El Hour Amro| rachid el hour amro|    rachidelhouramro|        ramro|        [2705314303]|             [rachidelhouramro]|                         [ramro]| 2705314303|            []|[2780381690, 3020...|[142362112]|          [15708023]|\n|     Глобальная эконом...|     35891|                null|Зуфар Фаатович Ху...|зуфар фаатович ху...|зуфарфаатовичхуса...|    зхусаинов|        [2662949013]|           [зуфарфаатовичхус...|                     [зхусаинов]| 2662949013|            []|[3018123877, 5138...| [17744445]|           [3116431]|\n+-------------------------+----------+--------------------+--------------------+--------------------+--------------------+-------------+--------------------+-------------------------------+--------------------------------+-----------+--------------+--------------------+-----------+--------------------+\nonly showing top 20 rows\n\nroot\n |-- MAGtitle: string (nullable \u003d true)\n |-- MAGpaperId: long (nullable \u003d true)\n |-- MAGdoi: string (nullable \u003d true)\n |-- MAGname: string (nullable \u003d true)\n |-- MAGnormName: string (nullable \u003d true)\n |-- normName: string (nullable \u003d true)\n |-- shortNormName: string (nullable \u003d true)\n |-- authorIds: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n |-- authorNormNames: array (nullable \u003d true)\n |    |-- element: string (containsNull \u003d true)\n |-- authorShortNormNames: array (nullable \u003d true)\n |    |-- element: string (containsNull \u003d true)\n |-- MAGauthorId: long (nullable \u003d true)\n |-- affiliationIds: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n |-- fosids: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n |-- fosids_lvl0: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n |-- fosids_lvl1: array (nullable \u003d true)\n |    |-- element: long (containsNull \u003d true)\n\nMAG_pub_authorsdf  cnt:661546284\n\u001b[1m\u001b[34mMAG_pub_authorsdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGtitle: string, MAGpaperId: bigint ... 13 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606814247953_2103858075",
      "id": "paragraph_1606814247953_2103858075",
      "dateCreated": "2020-12-01 11:17:27.953",
      "dateStarted": "2020-12-02 12:21:35.952",
      "dateFinished": "2020-12-02 12:21:49.420",
      "status": "FINISHED"
    },
    {
      "title": "Read ORCiD JSON Author-Pub files \u0026 convert to parquet",
      "text": "%spark\n\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.spark.sql.functions.concat_ws;\nimport org.apache.spark.sql.functions.countDistinct;\nimport  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer;\nimport java.util.Locale;\nimport org.apache.spark.storage.StorageLevel;\n\n//org.apache.commons.lang3.StringUtils.stripAccents(input.toLowerCase(Locale.ENGLISH));\n\n\n//val jsondf \u003d spark.read.json(\"/media/datadisk/Datasets/ORCiD/9988322/ORCID_2019_summaries/outgz/0.gz\")\nval orcid_df \u003d spark.read.json(\"/home/ometaxas/Datasets/ORCiD\")\n.select(lower($\"DOI\").as(\"doi\"), concat_ws(\" \", $\"firstName\",$\"surName\").as(\"ORCfullName\"), shortNormName( concat_ws(\" \", $\"firstName\",$\"surName\")).as(\"ORCshortNormName\"), normName(concat_ws(\" \", $\"firstName\",$\"surName\")).as(\"ORCnormName\"),  $\"pmID\".as(\"pmId\"), $\"orcId\")\n.dropDuplicates()\n//.persist(StorageLevel.DISK_ONLY)\n.cache()\n\n\norcid_df.printSchema\nprintln(\"ORCiD cnt:\" + orcid_df.count())\norcid_df.show(20)\n\norcid_df.write.parquet(\"/media/datadisk/Datasets/MAG_S2/orcid.parquet\")                    \n\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-07 17:01:32.274",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- doi: string (nullable \u003d true)\n |-- ORCfullName: string (nullable \u003d false)\n |-- ORCshortNormName: string (nullable \u003d true)\n |-- ORCnormName: string (nullable \u003d true)\n |-- pmId: string (nullable \u003d true)\n |-- orcId: string (nullable \u003d true)\n\nORCiD cnt:34108075\n+--------------------+-------------------+----------------+------------------+--------+-------------------+\n|                 doi|        ORCfullName|ORCshortNormName|       ORCnormName|    pmId|              orcId|\n+--------------------+-------------------+----------------+------------------+--------+-------------------+\n|10.1016/j.ijhcs.2...|Thanasis Daradoumis|     tdaradoumis|thanasisdaradoumis|        |0000-0001-9362-4469|\n|10.1007/978-1-071...|    AlessanRSS Reis|           areis|    alessanrssreis|32754820|0000-0001-8486-7469|\n|10.1007/978-1-071...|    AlessanRSS Reis|           areis|    alessanrssreis|32865745|0000-0001-8486-7469|\n|10.1007/978-1-071...|    AlessanRSS Reis|           areis|    alessanrssreis|32813241|0000-0001-8486-7469|\n|10.1080/13880209....|    AlessanRSS Reis|           areis|    alessanrssreis|31887257|0000-0001-8486-7469|\n|10.1080/17482631....|    AlessanRSS Reis|           areis|    alessanrssreis|32780653|0000-0001-8486-7469|\n|10.1080/10717544....|    AlessanRSS Reis|           areis|    alessanrssreis|32631085|0000-0001-8486-7469|\n|10.1080/22221751....|    AlessanRSS Reis|           areis|    alessanrssreis|32731802|0000-0001-8486-7469|\n|10.1080/16549716....|    AlessanRSS Reis|           areis|    alessanrssreis|32838706|0000-0001-8486-7469|\n|10.1080/17482631....|    AlessanRSS Reis|           areis|    alessanrssreis|32815779|0000-0001-8486-7469|\n|10.1097/jnr.00000...|    AlessanRSS Reis|           areis|    alessanrssreis|32555003|0000-0001-8486-7469|\n|10.1097/wco.00000...|    AlessanRSS Reis|           areis|    alessanrssreis|32833750|0000-0001-8486-7469|\n|10.1038/s41576-02...|    AlessanRSS Reis|           areis|    alessanrssreis|32770171|0000-0001-8486-7469|\n|10.1007/s00787-02...|    AlessanRSS Reis|           areis|    alessanrssreis|32889578|0000-0001-8486-7469|\n|10.1007/s42770-02...|    AlessanRSS Reis|           areis|    alessanrssreis|32895889|0000-0001-8486-7469|\n|   10.1111/ene.14514|    AlessanRSS Reis|           areis|    alessanrssreis|32909314|0000-0001-8486-7469|\n|10.1021/acssynbio...|    AlessanRSS Reis|           areis|    alessanrssreis|32966744|0000-0001-8486-7469|\n|10.1128/mbio.0183...|    AlessanRSS Reis|           areis|    alessanrssreis|32963005|0000-0001-8486-7469|\n|   10.1111/jgs.16865|    AlessanRSS Reis|           areis|    alessanrssreis|32965024|0000-0001-8486-7469|\n|   10.1111/ene.14508|    AlessanRSS Reis|           areis|    alessanrssreis|32896024|0000-0001-8486-7469|\n+--------------------+-------------------+----------------+------------------+--------+-------------------+\nonly showing top 20 rows\n\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.apache.spark.sql.functions.concat_ws\nimport org.apache.spark.sql.functions.countDistinct\nimport org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer\nimport java.util.Locale\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34morcid_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [doi: string, ORCfullName: string ... 4 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d6"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d7"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d8"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d9"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d10"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605871491169_1622597750",
      "id": "paragraph_1605871491169_1622597750",
      "dateCreated": "2020-11-20 13:24:51.169",
      "dateStarted": "2020-12-01 11:22:53.517",
      "dateFinished": "2020-12-01 11:25:11.731",
      "status": "FINISHED"
    },
    {
      "title": "Join MAG - S2 pub-author records",
      "text": "%spark\n\n\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\n\n// Specify schema for your csv file\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.spark.sql.functions.concat_ws;\nimport org.apache.spark.sql.functions.countDistinct;\n//import  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer;\nimport java.util.Locale;\nimport org.apache.spark.storage.StorageLevel;\n\n//NonNVME Took 9 hrs 12 min 44 sec. Last updated by anonymous at December 04 2020, 6:09:13 AM.\n//Took 2 hrs 36 min 12 sec. Last updated by anonymous at December 14 2020, 5:04:52 PM.\n\n\nval MAG_pub_authors1 \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/MAG_pub_authors.parquet\")\n//MAG_pub_authors1.printSchema()\n\n\n\n//MAG_pub_authors.repartition(500,\"\")\n//println(MAG_pub_authors.rdd.getNumPartitions)\n//println(\"Join_Mag_auth_pubCnt:\"+MAG_pub_authors.count())\n//MAG_pub_authors.write.format(\"parquet\").bucketBy(100, \"MAGpaperId\").sortBy(\"shortNormName\").saveAsTable(\"MAG_pub_authors_bucket\")\n//MAG_pub_authorsdf.write.bucketBy(100, \"MAGpaperId\").sortBy(\"shortNormName\").parquet(\"/media/datadisk/Datasets/MAG_S2/MAG_pub_authors_bucket.parquet\")                    \n\n\nval S2_Pub_Authors1 \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_Pub_Authors.parquet\").withColumn(\"magId\",col(\"magId\").cast(LongType)).withColumnRenamed(\"magId\", \"MAGpaperId\")\n//S2_Pub_Authors1.printSchema()\n//println(S2_Pub_Authors.rdd.getNumPartitions)\n//S2_Pub_Authorsdf.write.format(\"parquet\").bucketBy(100, \"magId\").sortBy(\"S2shortNormName\").saveAsTable(\"S2_pub_authors_bucket\")\n\n\n//val MAG_pub_authorsdf \u003d spark.table(\"MAG_pub_authors_bucket\")\n//println(\"Join_Mag_auth_pubCnt:\"+MAG_pub_authorsdf.count())\n\n//val S2_Pub_Authors \u003d spark.table(\"S2_pub_authors_bucket\")\n//println(\"Join_S2_auth_pubCnt:\"+MAG_pub_authorsdf.count())\n\n//repartitioning to avoid huge shuffling and speed-up sort-merge join \nval MAG_pub_authors \u003d MAG_pub_authors1.repartition(500, MAG_pub_authors1.col(\"MAGpaperId\"))\nval S2_Pub_Authors \u003d S2_Pub_Authors1.repartition(500, S2_Pub_Authors1.col(\"MAGpaperId\"))\n\n\nval S2_MAG_df \u003d MAG_pub_authors\n                   .join(S2_Pub_Authors, S2_Pub_Authors(\"MAGpaperId\") \u003d\u003d\u003d MAG_pub_authors(\"MAGpaperId\")  \u0026\u0026 ( S2_Pub_Authors(\"S2shortNormName\")\u003d\u003d\u003dMAG_pub_authors(\"shortNormName\")  || (jaro_winkler($\"normName\", $\"S2normName\") \u003e 0.82 \u0026\u0026 levenshtein($\"normName\", $\"S2normName\")\u003c3  \u0026\u0026 soundex($\"normName\") \u003d\u003d\u003d soundex($\"S2normName\") ) ), \"left_outer\")                  \n                   //MAG_pub_authorsdf(\"MAGtitle\"), \n                   .select(MAG_pub_authors(\"MAGpaperId\"), MAG_pub_authors(\"MAGdoi\"),  MAG_pub_authors(\"MAGname\").as(\"MAGdisplayName\"), MAG_pub_authors(\"MAGnormName\").as(\"MAGname\"), MAG_pub_authors(\"normName\").as(\"MAGnormName\"), \n                            MAG_pub_authors(\"shortNormName\").as(\"MAGshortNormName\"),  MAG_pub_authors(\"MAGauthorId\"), MAG_pub_authors(\"fosids\"), MAG_pub_authors(\"fosids_lvl0\") ,MAG_pub_authors(\"fosids_lvl1\"), \n                            MAG_pub_authors(\"authorIds\"), MAG_pub_authors(\"authorNormNames\"), MAG_pub_authors(\"authorShortNormNames\"),MAG_pub_authors(\"affiliationIds\"), \n                            S2_Pub_Authors(\"S2authorId\"),S2_Pub_Authors(\"S2paperId\"), S2_Pub_Authors(\"S2doi\"), S2_Pub_Authors(\"S2name\"), S2_Pub_Authors(\"S2shortNormName\"), S2_Pub_Authors(\"S2normName\"), S2_Pub_Authors(\"S2fos\") )\n                            .dropDuplicates()\n                            // .persist(StorageLevel.DISK_ONLY)\n\n//S2_MAG_df.show(10)\n//println(\"Join_S2_Mag_auth_pubCnt:\"+S2_MAG_df.count())\nS2_MAG_df.write.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_df.parquet\")\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-16 13:16:06.862",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.apache.spark.sql.functions.concat_ws\nimport org.apache.spark.sql.functions.countDistinct\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer\nimport java.util.Locale\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34mMAG_pub_authors1\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGtitle: string, MAGpaperId: bigint ... 13 more fields]\n\u001b[1m\u001b[34mS2_Pub_Authors1\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [S2title: string, S2paperId: string ... 8 ...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1605993979140_229979962",
      "id": "paragraph_1605993979140_229979962",
      "dateCreated": "2020-11-21 23:26:19.141",
      "dateStarted": "2020-12-16 13:16:06.871",
      "dateFinished": "2020-12-16 15:27:08.928",
      "status": "FINISHED"
    },
    {
      "title": "Analyze \u0026 remove false positives (double matches)",
      "text": "%spark\nimport org.apache.spark.sql.functions.countDistinct;\nimport org.apache.spark.storage.StorageLevel;\n\nval S2_MAG_df \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_df.parquet\")\n//val df3 \u003d S2_MAG_df.select(countDistinct($\"MAGpaperId\", $\"MAGauthorId\"))\n//df3.show(false)\n\n/*\nval S2_MAG_grp_df \u003d S2_MAG_df\n                .groupBy($\"MAGpaperId\", $\"MAGauthorId\")\n                //.agg(count(\"S2authorId\").as(\"S2authorCnt\"), collect_list(S2_MAG_df(\"S2authorId\")).as(\"S2authorIds\"), collect_set(S2_MAG_df(\"S2paperId\")).as(\"S2paperIds\"), collect_list(S2_MAG_df(\"S2name\")).as(\"S2names\"), collect_list(S2_MAG_df(\"S2shortNormName\")).as(\"S2shortNormNames\"), collect_list(S2_MAG_df(\"S2normName\")).as(\"S2normNames\") )\n                .where($\"S2authorCnt\"\u003e1)\n                .persist(StorageLevel.DISK_ONLY)\n                */\n\nval S2_MAG_fp_df \u003d S2_MAG_df\n                .groupBy($\"MAGpaperId\", $\"MAGauthorId\")\n                //.agg(count(\"S2authorId\").as(\"S2authorCnt\"))\n                .agg(count(\"S2authorId\").as(\"S2authorCnt\")\n                , collect_list(S2_MAG_df(\"S2authorId\")).as(\"S2authorIds\"), collect_set(S2_MAG_df(\"S2paperId\")).as(\"S2paperIds\"), collect_list(S2_MAG_df(\"S2name\")).as(\"S2names\"), collect_list(S2_MAG_df(\"S2shortNormName\")).as(\"S2shortNormNames\"), collect_list(S2_MAG_df(\"S2normName\")).as(\"S2normNames\") )\n                .where($\"S2authorCnt\"\u003e1)\n  //              .persist(StorageLevel.DISK_ONLY)\n\n//println(\"S2_MAG_fp_df cnt:\" + S2_MAG_fp_df.count())\n//S2_MAG_fp_df.show(50)\n//S2_MAG_fp_df.limit(200).coalesce(1).write.json(\"/media/ometaxas/nvme/datasets/MAG_S2/doubleMatch.json\")\n\nval S2_MAG_nonDoubles\u003d S2_MAG_df.join(broadcast(S2_MAG_fp_df), S2_MAG_df(\"MAGpaperId\") \u003d\u003d\u003d S2_MAG_fp_df(\"MAGpaperId\") \u0026\u0026 S2_MAG_df(\"MAGauthorId\") \u003d\u003d\u003d S2_MAG_fp_df(\"MAGauthorId\") \u0026\u0026 S2_MAG_df(\"S2normName\")\u003d!\u003dS2_MAG_df(\"MAGnormName\"), \"leftanti\")\n\nS2_MAG_nonDoubles.write.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_NFP_df.parquet\")\n\n//.coalesce(1).write.csv(\"PaperReferenceswithDOIs.csv\")\n//661546284\n\n//val S2_MAG_Orciddf \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_Orcid.parquet\").dropDuplicates()\n//802561855\n//println(\"S2_MAG cnt:\" + S2_MAG_df.count())\n\n//val S2_MAG_df1 \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_df.parquet\").dropDuplicates()\n//val S2_MAG_Orciddf \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_Orcid.parquet\").dropDuplicates()\n\n//println(\"S2_MAG1 cnt:\" + S2_MAG_df1.count())\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-17 21:17:34.047",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql.functions.countDistinct\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34mS2_MAG_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGpaperId: bigint, MAGdoi: string ... 19 more fields]\n\u001b[1m\u001b[34mS2_MAG_fp_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [MAGpaperId: bigint, MAGauthorId: bigint ... 6 more fields]\n\u001b[1m\u001b[34mS2_MAG_nonDoubles\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGpaperId: bigint, MAGdoi: string ... 19 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1607966825569_667439463",
      "id": "paragraph_1607966825569_667439463",
      "dateCreated": "2020-12-14 19:27:05.569",
      "dateStarted": "2020-12-17 21:17:34.051",
      "dateFinished": "2020-12-17 22:36:01.971",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nval S2_MAG_df \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_NFP_df.parquet\")\nprintln(\"S2_MAG_fp_df cnt:\" + S2_MAG_df.count())\n\nval MAG_pub_authors \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/MAG_pub_authors.parquet\")\nprintln(\"MAG_pub_authors cnt:\" + MAG_pub_authors.count())\n\nval S2_MAG_fp_df \u003d S2_MAG_df\n                .groupBy($\"MAGpaperId\", $\"MAGauthorId\")\n                //.agg(count(\"S2authorId\").as(\"S2authorCnt\"))\n                .agg(count(\"S2authorId\").as(\"S2authorCnt\")\n                , collect_list(S2_MAG_df(\"S2authorId\")).as(\"S2authorIds\"), collect_set(S2_MAG_df(\"S2paperId\")).as(\"S2paperIds\"), collect_list(S2_MAG_df(\"S2name\")).as(\"S2names\"), collect_list(S2_MAG_df(\"S2shortNormName\")).as(\"S2shortNormNames\"), collect_list(S2_MAG_df(\"S2normName\")).as(\"S2normNames\") )\n                .where($\"S2authorCnt\"\u003e1)\n  //              .persist(StorageLevel.DISK_ONLY)\n\nprintln(\"S2_MAG_fp_df cnt:\" + S2_MAG_fp_df.count())\nS2_MAG_fp_df.show(50)",
      "user": "anonymous",
      "dateUpdated": "2020-12-18 11:43:31.882",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "S2_MAG_fp_df cnt:661555458\nMAG_pub_authors cnt:661546284\nS2_MAG_fp_df cnt:22572\n+----------+-----------+-----------+--------------------+--------------------+----------------------------------+------------------------------------+------------------------------------+\n|MAGpaperId|MAGauthorId|S2authorCnt|         S2authorIds|          S2paperIds|                           S2names|                    S2shortNormNames|                         S2normNames|\n+----------+-----------+-----------+--------------------+--------------------+----------------------------------+------------------------------------+------------------------------------+\n|  20661002| 2710583340|          2|[123574337, 15284...|[505d6b91d4d8eccd...|              [S. A. Esenwein, ...|                [saesenwein, saes...|                [saesenwein, saes...|\n| 126782910| 2040504706|          2|  [9893644, 9893644]|[e5116ea3e072a25e...|              [E  Micskey, E  m...|                [emicskey, emicskey]|                [emicskey, emicskey]|\n| 137887807| 2798965977|          2|[47350275, 94027571]|[5433fe6d45465114...|              [Tong Bou Chang, ...|                [tongbouchang, to...|                [tongbouchang, to...|\n| 180803647| 2799108605|          2|[1717720, 116617877]|[050335611ede6443...|              [Bert  Bredeweg, ...|                [bertbredeweg, be...|                [bertbredeweg, be...|\n| 349375651| 2798603694|          2|[102543633, 10254...|[0c34c7c0c58bfc1c...|              [DongSheng  Cai, ...|                [dongshengcai, do...|                [dongshengcai, do...|\n| 612093272|  767547022|          2|[1517706994, 1211...|[8265f83afca14996...|              [René  Marill-Alb...|                [renemarillalbere...|                [renemarillalbere...|\n|1419261065| 2304264947|          2|[145669210, 49810...|[ea8746343d5468ed...|              [Jing  Zhao, Jing...|                [jingzhao, jingzhao]|                [jingzhao, jingzhao]|\n|1518725847| 2158730666|          2|[102824760, 2016565]|[c2b3eca539b0de2c...|               [X. C. Ai, X.  Cai]|                        [xcai, xcai]|                        [xcai, xcai]|\n|1576686720| 1495125403|          2|[8601667, 153716451]|[df6b96b21ed60f8e...|              [Fusun  Terzioglu...|                [fusunterzioglu, ...|                [fusunterzioglu, ...|\n|2040361590| 2708340918|          2|[144205241, 46358...|[4be81fa864bd0095...|              [Yong-Hee  Lee, Y...|                [yongheelee, yong...|                [yongheelee, yong...|\n|2049881188| 2150692620|          2|[1406217098, 1415...|[0af58d8d8f73b7cf...|              [A.  Benedict-Smi...|                [abenedictsmith, ...|                [abenedictsmith, ...|\n|2066064217| 2422599529|          2|[30656455, 40763550]|[48e2aaa2a73fa892...|                  [H  Liu, H  Liu]|                        [hliu, hliu]|                        [hliu, hliu]|\n|2086268862| 2955868898|          2|[1381476799, 1381...|[981a27c154463da4...|              [Matazō  Nakamura...|                [matazonakamura, ...|                [matazonakamura, ...|\n|2102741013| 2614473931|          2|[1397734263, 3769...|[ea25420fe1377474...|              [Montserrat  Fern...|                [montserratfernan...|                [montserratfernan...|\n|2157615379| 3071274946|          2|[40040138, 82737783]|[4223b24fd581da23...|              [B  Fazekas, B  F...|                [bfazekas, bfazekas]|                [bfazekas, bfazekas]|\n|2189363957| 2158413771|          2|  [2358316, 2358316]|[0b6bc0aad4556e16...|              [Michael L. Mcclo...|                [michaellmccloud,...|                [michaellmccloud,...|\n|2277999768| 2589662123|          2|[145013775, 14501...|[0d67d78292ab9977...|              [M. H. Kelsey, Mh...|                [mhkelsey, mhkelsey]|                [mhkelsey, mhkelsey]|\n|2286060689| 2634755614|          2|[12851951, 81834832]|[9292e1ec3bdc7287...|              [Caroline  Rodige...|                [carolinerodiger,...|                [carolinerodiger,...|\n|2320033781| 2806874430|          2|[21054950, 48923451]|[509ece859b1f26c1...|              [Adam  Łomnicki, ...|                [adamlomnicki, ad...|                [adamlomnicki, ad...|\n|2330406974| 2179583944|          2|[12048527, 50225403]|[af903c4d9a97ca27...|              [Conor Mc Donnell...|                [conormcdonnell, ...|                [conormcdonnell, ...|\n|2331288455| 2316387883|          2|[1402125223, 1402...|[abb80fbf453ab354...|              [R. P. Prŷs-Jones...|                [rpprysjones, rpp...|                [rpprysjones, rpp...|\n|2337723696| 2745435675|          2|[1422366904, 8738...|[a0484ac015ee227c...|              [Oswaldo  Téllez-...|                [oswaldotellezval...|                [oswaldotellezval...|\n|2344183039| 2953996510|          2|[3695872, 153291251]|[a5293bb4f17ad25a...|              [Jong in Jeong, J...|                [jonginjeong, jon...|                [jonginjeong, jon...|\n|2416395560| 2098161725|          2|[1421526929, 4759...|[5c941bf9459e7de3...|              [Karen  Heinicke-...|                [karenheinickemot...|                [karenheinickemot...|\n|2417516629| 2154747353|          2| [2653796, 77874645]|[2c1ad11381bed033...|                [S H Kim, S H Kim]|                      [shkim, shkim]|                      [shkim, shkim]|\n|2417945157| 2887364982|          2|[35540828, 35540828]|[e1f913f174700922...|              [F.  Forlani, F  ...|                [fforlani, fforlani]|                [fforlani, fforlani]|\n|2488976941| 2633660538|          2| [50228835, 2517840]|[465a67214ccdb221...|              [David C. Mohr, D...|                [davidcmohr, davi...|                [davidcmohr, davi...|\n|2498885674| 2464788806|          2|[65784997, 140086...|[3f8abb2c36529164...|              [M Patricio Bordo...|                [mpatriciobordoma...|                [mpatriciobordoma...|\n|2547042232| 1206025882|          2| [5537117, 46570827]|[250c1f24a22bcb81...|              [Victoria  Aramă,...|                [victoriaarama, v...|                [victoriaarama, v...|\n|2551953272| 2531353584|          2|[121990125, 12199...|[1bd1d127f46a7d6c...|              [Ap  Wagner, A. P...|                [apwagner, apwagner]|                [apwagner, apwagner]|\n|2575867068| 2974129498|          2|[38711037, 81463314]|[40c3bba6382e2223...|              [A. Lopez Sierra,...|                [alopezsierra, al...|                [alopezsierra, al...|\n|2584558268| 2602747806|          2|[21183301, 33436501]|[3314e45d366d5eca...|              [Robert B McMaste...|                [robertbmcmaster,...|                [robertbmcmaster,...|\n|2596658886| 2144028017|          2|[144004569, 47514...|[36115e26e3d13078...|              [Horng-Huei  Liou...|                [hornghueiliou, h...|                [hornghueiliou, h...|\n|2598488115| 2651890893|          2|[1401778744, 1401...|[4e8d481fa09a55cf...|              [Olga  Warszawik-...|                [olgawarszawikhen...|                [olgawarszawikhen...|\n|2602975011| 2776814044|          2|[16342459, 16342459]|[ae45f3d9fbe21a8a...|              [Natale G. De San...|                [natalegdesanto, ...|                [natalegdesanto, ...|\n|2602985057| 2790555621|          2|[1398852892, 4119...|[a860fe36d1d81ca3...|              [Becky  Kochender...|                [beckykochenderfe...|                [beckykochenderfe...|\n|2604117255| 2466067486|          2|[31926389, 31926389]|[cf2d2bb2f6dc4b07...|              [H  Walti, H.  Wa...|                    [hwalti, hwalti]|                    [hwalti, hwalti]|\n|2607591937| 1665915573|          2|[1419267294, 1419...|[de43a348a72ae2f5...|              [D.  Curri, D  Cu...|                    [dcurri, dcurri]|                    [dcurri, dcurri]|\n|2612474156| 2614078512|          2|[134746637, 13474...|[e79dca095bb11459...|              [Silvânia Maria M...|                [silvaniamariamen...|                [silvaniamariamen...|\n|2612759969| 2603294657|          2|[153114263, 15311...|[d86df48770c56c7a...|              [G  Madeddu, G.  ...|                [gmadeddu, gmadeddu]|                [gmadeddu, gmadeddu]|\n|2682097371| 2605311250|          2|[52269778, 52424601]|[cf06871d8acebfb1...|              [Ken  Fredric, Ke...|                [kenfredric, kenf...|                [kenfredric, kenf...|\n|2731935347| 2605311250|          2|[52269778, 52424601]|[d03dbf9db5381356...|              [Ken  Fredric, Ke...|                [kenfredric, kenf...|                [kenfredric, kenf...|\n|2737048791| 2738022109|          2|[133945727, 13394...|[e5038097679d6e39...|              [F  Castello, F. ...|                [fcastello, fcast...|                [fcastello, fcast...|\n|2745029899| 2744021432|          2|[152302837, 15230...|[9b32c952fba83d55...|              [G.  Zagone, G  Z...|                  [gzagone, gzagone]|                  [gzagone, gzagone]|\n|2745100979| 2744380440|          2|[144378987, 14806...|[13781db0dd710394...|              [Shinichi  Ishizu...|                [shinichiishizuka...|                [shinichiishizuka...|\n|2747467189|  902994901|          2|[104213331, 10421...|[d84d14962a969442...|              [S.  Bonafede, S ...|                [sbonafede, sbona...|                [sbonafede, sbona...|\n|2752736782| 2627177537|          2|[52269778, 52424601]|[69ef2f1f3f91f2a3...|              [Ken  Fredric, Ke...|                [kenfredric, kenf...|                [kenfredric, kenf...|\n|2754521464| 2754360447|          2|[1435134708, 1435...|[7a2829b2c97d6e0c...|[チャールズリチャード  キェルボ...|[チャールズリチャードキェルホ...|[チャールズリチャードキェルホ...|\n|2755700943| 2487235663|          2|[70949697, 70949697]|[abbee551e4c85f7e...|              [AM Van Roon, AM ...|                [amvanroon, amvan...|                [amvanroon, amvan...|\n|2760938022| 2707998314|          2|[50135652, 12135788]|[f946d8eb7985ea7f...|                [Wen  Li, Wen  Li]|                      [wenli, wenli]|                      [wenli, wenli]|\n+----------+-----------+-----------+--------------------+--------------------+----------------------------------+------------------------------------+------------------------------------+\nonly showing top 50 rows\n\n\u001b[1m\u001b[34mS2_MAG_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGpaperId: bigint, MAGdoi: string ... 19 more fields]\n\u001b[1m\u001b[34mMAG_pub_authors\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGtitle: string, MAGpaperId: bigint ... 13 more fields]\n\u001b[1m\u001b[34mS2_MAG_fp_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [MAGpaperId: bigint, MAGauthorId: bigint ... 6 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d9"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d10"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d11"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d12"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d13"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d14"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1608225348746_1833133501",
      "id": "paragraph_1608225348746_1833133501",
      "dateCreated": "2020-12-17 19:15:48.747",
      "dateStarted": "2020-12-18 11:43:31.885",
      "dateFinished": "2020-12-18 11:55:17.781",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nimport org.apache.spark.sql.functions.countDistinct;\nval S2_MAG_df \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_df.parquet\")//.filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 $\"S2doi\".isNotNull \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\").select($\"S2doi\")\n\n//S2_MAG_df.cache()\n\nprintln(\"s2doi diffs cnt:\"+S2_MAG_df.count())\n//println(\"s2doi diffs cnt:\"+S2_MAG_df.distinct($\"S2doi\").count())\n\nS2_MAG_df.show(50)\n\nval df3 \u003d S2_MAG_df.select(countDistinct(\"S2doi\"))\ndf3.show(false)\n\nval orcid_df \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/orcid.parquet\")\n.cache()\n\n\norcid_df.printSchema\nprintln(\"ORCiD cnt:\" + orcid_df.count())\norcid_df.show(40)\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-14 19:28:42.545",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "s2doi diffs cnt:90997\n+--------------------+\n|               S2doi|\n+--------------------+\n|10.1007/978-3-662...|\n|10.1007/978-3-662...|\n|10.1007/978-3-662...|\n|10.1007/978-3-662...|\n|10.25267/rev_eure...|\n|10.1111/j.1439-03...|\n|10.1111/j.1439-03...|\n|10.1007/978-3-642...|\n|10.1016/0167-2584...|\n|     10.1139/p73-042|\n|     10.1139/p73-042|\n|10.1111/j.1651-22...|\n|10.1016/j.physb.2...|\n|10.1016/j.physb.2...|\n|10.1016/j.physb.2...|\n|10.1016/j.physb.2...|\n|10.1016/j.physb.2...|\n|10.1016/s0002-927...|\n|10.1016/s0002-927...|\n|10.1016/s0002-927...|\n|10.1016/s0002-927...|\n|10.1016/0167-2584...|\n|10.1016/0039-6028...|\n|10.1111/j.1939-16...|\n|  10.1007/bf01021580|\n|  10.1007/bf01021580|\n|10.2523/iptc-1147...|\n|10.1001/archderm....|\n|10.1016/0167-2584...|\n|10.1002/chin.2011...|\n|10.1002/chin.2011...|\n|10.1002/chin.2011...|\n|10.1016/j.rapm.20...|\n|10.1016/j.rapm.20...|\n|10.1016/j.rapm.20...|\n|10.1016/j.rapm.20...|\n|10.1163/156853367...|\n|10.1037/0096-3445...|\n|10.1177/107906328...|\n|10.1177/107906328...|\n|10.1177/107906328...|\n|    10.1038/321679a0|\n|10.1016/0010-4655...|\n|  10.1007/bf02892726|\n|  10.1007/bf02892726|\n|10.1080/014311600...|\n|10.1111/j.1469-87...|\n|10.1111/j.1469-87...|\n|10.1111/j.1469-87...|\n|10.1111/j.1469-87...|\n+--------------------+\nonly showing top 50 rows\n\n+---------------------+\n|count(DISTINCT S2doi)|\n+---------------------+\n|32213                |\n+---------------------+\n\nimport org.apache.spark.sql.functions.countDistinct\n\u001b[1m\u001b[34mS2_MAG_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [S2doi: string]\n\u001b[1m\u001b[34mdf3\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [count(DISTINCT S2doi): bigint]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d2"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d4"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d5"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d6"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1607075633760_2013582998",
      "id": "paragraph_1607075633760_2013582998",
      "dateCreated": "2020-12-04 11:53:53.760",
      "dateStarted": "2020-12-04 13:28:35.672",
      "dateFinished": "2020-12-04 13:28:41.545",
      "status": "FINISHED"
    },
    {
      "title": "Join ORCiD Data with MAG \u0026 S2 (based on MAG_doi)",
      "text": "%spark\n\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\n\n// Specify schema for your csv file\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.spark.sql.functions.concat_ws;\nimport org.apache.spark.sql.functions.countDistinct;\n//import  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer;\nimport java.util.Locale;\nimport org.apache.spark.storage.StorageLevel;\n\n\n\n//NOnvme 4 hrs 6 min 0 sec. Last updated by anonymous at December 04 2020, 7:21:43 PM. (outdated)\n\n//val jsondf \u003d spark.read.json(\"/media/datadisk/Datasets/ORCiD/9988322/ORCID_2019_summaries/outgz/0.gz\")\nval orcid_df \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/orcid.parquet\")\n.cache()\n\n\norcid_df.printSchema\nprintln(\"ORCiD cnt:\" + orcid_df.count())\norcid_df.show(40)\n\n\nval S2_MAG_df \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_NFP_df.parquet\")\n//.cache()\n\n//S2_MAG_df.groupBy($\"S2doi\").show(10)\n\n//S2_MAG_df.filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 $\"S2doi\".isNotNull \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\")\n//.cache()\n\n//println(\"s2doi diffs cnt:\"+S2_MAG_df.count())\n\n\n//println(\"s2doi diffs cnt:\"+S2_MAG_Orcid_df\n//S2_MAG_df.filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 ($\"magId\".isNotNull) \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\")\n\n\nval S2_MAG_Orcid_df1 \u003d S2_MAG_df\n                    //trying to match either S2doi or MAGdoi (REMARK: matching also with S2dois give us 2743 more author - pub records (on top of the 49376386 which we matched using MAGdoi) which is a small gain comparing to the matches with MAGdoi\n                    .join(broadcast(orcid_df), (S2_MAG_df(\"MAGdoi\") \u003d\u003d\u003d orcid_df(\"doi\"))\u0026\u0026 ( S2_MAG_df(\"S2shortNormName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\") ||  S2_MAG_df(\"MAGshortNormName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\") ||  \n                    ( jaro_winkler($\"MAGnormName\", $\"ORCnormName\") \u003e 0.82 \u0026\u0026 levenshtein($\"MAGnormName\", $\"ORCnormName\")\u003c3 \u0026\u0026 soundex($\"MAGnormName\") \u003d\u003d\u003d soundex($\"ORCnormName\") ) ) \n                  // .join(broadcast(orcid_df), (S2_MAG_df(\"MAGdoi\") \u003d\u003d\u003d orcid_df(\"doi\") || S2_MAG_df(\"S2doi\") \u003d\u003d\u003d orcid_df(\"doi\") )\u0026\u0026 ( S2_MAG_df(\"S2shortNormName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\") ||  S2_MAG_df(\"MAGshortNormName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\") ||  levenshtein($\"MAGnormName\", $\"ORCnormName\")\u003e0.8  \u0026\u0026 double_metaphone($\"MAGnormName\") \u003d\u003d\u003d double_metaphone($\"ORCnormName\") ) \n                   , \"left_outer\")       \n                     .select(S2_MAG_df(\"MAGpaperId\"), S2_MAG_df(\"MAGdoi\"),  S2_MAG_df(\"MAGdisplayName\"), S2_MAG_df(\"MAGname\"), S2_MAG_df(\"MAGnormName\"), \n                            S2_MAG_df(\"MAGshortNormName\"),  S2_MAG_df(\"MAGauthorId\"), S2_MAG_df(\"fosids\"), S2_MAG_df(\"fosids_lvl0\") ,S2_MAG_df(\"fosids_lvl1\"), \n                            S2_MAG_df(\"authorIds\"), S2_MAG_df(\"authorNormNames\"), S2_MAG_df(\"authorShortNormNames\"),S2_MAG_df(\"affiliationIds\"), \n                            S2_MAG_df(\"S2authorId\"),S2_MAG_df(\"S2paperId\"), S2_MAG_df(\"S2doi\"), S2_MAG_df(\"S2name\"), S2_MAG_df(\"S2shortNormName\"), S2_MAG_df(\"S2normName\"), S2_MAG_df(\"S2fos\") , orcid_df(\"orcId\"))\n                            \n                   \nS2_MAG_Orcid_df1.write.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_Orcid.parquet\")      \n\n/*\n\nval S2_MAG_Orcid_df2 \u003d S2_MAG_df.filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 $\"S2doi\".isNotNull \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\")\n                   .join(broadcast(orcid_df), S2_MAG_df(\"MAGdoi\") \u003d\u003d\u003d orcid_df(\"doi\") \u0026\u0026 ( S2_MAG_df(\"S2shortNormName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\") ||  S2_MAG_df(\"MAGshortNormName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\")   \n                     || (levenshtein(fulltrim($\"MAGname\"), fulltrim($\"orcfullname\"))\u003e0.8  \u0026\u0026 double_metaphone(fulltrim($\"MAGname\")) \u003d\u003d\u003d double_metaphone(fulltrim($\"orcfullname\")) ) \n                   ), \"left_outer\")       \n                     .select(S2_MAG_df(\"MAGpaperId\"), S2_MAG_df(\"MAGdoi\"),  S2_MAG_df(\"MAGdisplayName\"), S2_MAG_df(\"MAGname\"), S2_MAG_df(\"MAGnormName\"), \n                            S2_MAG_df(\"MAGshortNormName\"),  S2_MAG_df(\"MAGauthorId\"), S2_MAG_df(\"fosids\"), S2_MAG_df(\"fosids_lvl0\") ,S2_MAG_df(\"fosids_lvl1\"), \n                            S2_MAG_df(\"authorIds\"), S2_MAG_df(\"authorNormNames\"), S2_MAG_df(\"authorShortNormNames\"),S2_MAG_df(\"affiliationIds\"), \n                            S2_MAG_df(\"S2authorId\"),S2_MAG_df(\"S2paperId\"), S2_MAG_df(\"S2doi\"), S2_MAG_df(\"S2name\"), S2_MAG_df(\"S2shortNormName\"), S2_MAG_df(\"S2normName\"), S2_MAG_df(\"S2fos\") , orcid_df(\"orcId\"))\n                            \n                   //.persist(StorageLevel.DISK_ONLY)\n\n//S2_MAG_Orcid_df.write.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_Orcid.parquet\")      \n\nval S2_MAG_Orcid_df \u003d       S2_MAG_Orcid_df1.union(S2_MAG_Orcid_df2)\n                    .dropDuplicates()\n                    .persist(StorageLevel.DISK_ONLY)\n                    \nS2_MAG_Orcid_df.write.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_Orcid.parquet\")      \n//println(\"ACMsubset cnt:\"+ACMsubsetouter.count())\n//ACMsubsetouter.orderBy(\"MAGshortNormName\").show(100) \n\nprintln(\"Orcid pub cnt:\"+S2_MAG_Orcid_df\n.filter(($\"orcid\" \u003d!\u003d \"\") \u0026\u0026 ($\"orcid\".isNotNull)).count())\n\nval df2 \u003d S2_MAG_Orcid_df.select(countDistinct(\"orcid\"))\ndf2.show(false)\n\n\nval dfMagid \u003d S2_MAG_Orcid_df.select(countDistinct(\"MAGauthorId\"))\ndfMagid.show(false)\n\nval dfS2Id \u003d S2_MAG_Orcid_df.select(countDistinct(\"S2authorId\"))\ndfS2Id.show(false)\n*/\n              \n",
      "user": "anonymous",
      "dateUpdated": "2020-12-22 12:02:24.408",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- doi: string (nullable \u003d true)\n |-- ORCfullName: string (nullable \u003d true)\n |-- ORCshortNormName: string (nullable \u003d true)\n |-- ORCnormName: string (nullable \u003d true)\n |-- pmId: string (nullable \u003d true)\n |-- orcId: string (nullable \u003d true)\n\nORCiD cnt:34108075\n+--------------------+--------------------+----------------+--------------------+--------+-------------------+\n|                 doi|         ORCfullName|ORCshortNormName|         ORCnormName|    pmId|              orcId|\n+--------------------+--------------------+----------------+--------------------+--------+-------------------+\n|10.3389/fpls.2018...|Muhammad Abdul Re...|         mrashid|muhammadabdulrehm...|        |0000-0002-4941-3469|\n|10.1007/978-1-071...|     AlessanRSS Reis|           areis|      alessanrssreis|32857345|0000-0001-8486-7469|\n|10.1007/978-1-071...|     AlessanRSS Reis|           areis|      alessanrssreis|32822033|0000-0001-8486-7469|\n|10.1007/978-1-071...|     AlessanRSS Reis|           areis|      alessanrssreis|32827140|0000-0001-8486-7469|\n|10.1080/14756366....|     AlessanRSS Reis|           areis|      alessanrssreis|32441172|0000-0001-8486-7469|\n|10.1084/jem.20190354|     AlessanRSS Reis|           areis|      alessanrssreis|32860704|0000-0001-8486-7469|\n|10.1080/19336918....|     AlessanRSS Reis|           areis|      alessanrssreis|32538273|0000-0001-8486-7469|\n|10.1080/22221751....|     AlessanRSS Reis|           areis|      alessanrssreis|32228226|0000-0001-8486-7469|\n|10.1080/22221751....|     AlessanRSS Reis|           areis|      alessanrssreis|32284022|0000-0001-8486-7469|\n|10.1080/0886022x....|     AlessanRSS Reis|           areis|      alessanrssreis|31918608|0000-0001-8486-7469|\n|10.1007/s11121-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32504393|0000-0001-8486-7469|\n|10.1007/s12015-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32691369|0000-0001-8486-7469|\n|10.1007/s10461-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32385677|0000-0001-8486-7469|\n|10.1007/s10802-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32648044|0000-0001-8486-7469|\n|10.1166/jnn.2020....|     AlessanRSS Reis|           areis|      alessanrssreis|32384973|0000-0001-8486-7469|\n|10.1080/02699931....|     AlessanRSS Reis|           areis|      alessanrssreis|32883181|0000-0001-8486-7469|\n|10.1186/s12879-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32962655|0000-0001-8486-7469|\n| 10.1055/a-1237-0490|     AlessanRSS Reis|           areis|      alessanrssreis|32961566|0000-0001-8486-7469|\n|10.1001/jamacardi...|     AlessanRSS Reis|           areis|      alessanrssreis|32915194|0000-0001-8486-7469|\n|   10.1002/jmv.26539|     AlessanRSS Reis|           areis|      alessanrssreis|32966614|0000-0001-8486-7469|\n|10.1136/bmjopen-2...|     AlessanRSS Reis|           areis|      alessanrssreis|32895275|0000-0001-8486-7469|\n|10.1007/s00586-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32895774|0000-0001-8486-7469|\n|   10.1111/jdv.16929|     AlessanRSS Reis|           areis|      alessanrssreis|32924186|0000-0001-8486-7469|\n|10.1007/s00038-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32910208|0000-0001-8486-7469|\n|10.1044/2020_jslh...|     AlessanRSS Reis|           areis|      alessanrssreis|32910735|0000-0001-8486-7469|\n|10.1213/ane.00000...|     AlessanRSS Reis|           areis|      alessanrssreis|32459667|0000-0001-8486-7469|\n|10.21037/atm.2020...|     AlessanRSS Reis|           areis|      alessanrssreis|32647727|0000-0001-8486-7469|\n|10.1186/s41038-01...|     AlessanRSS Reis|           areis|      alessanrssreis|30783604|0000-0001-8486-7469|\n| 10.2147/ppa.s175957|     AlessanRSS Reis|           areis|      alessanrssreis|30573952|0000-0001-8486-7469|\n|10.1055/s-0038-16...|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.1590/1413-8123...|     AlessanRSS Reis|           areis|      alessanrssreis|30281726|0000-0001-8486-7469|\n|   10.1002/oby.22035|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.1007/s12144-01...|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.14295/cs.v9i3....|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|  10.1111/micc.12416|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.4012/dmj.2016-430|     AlessanRSS Reis|           areis|      alessanrssreis|29081446|0000-0001-8486-7469|\n|10.1371/journal.p...|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n| 10.1155/2014/753780|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|    10.1037/a0016901|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.1111/j.1463-13...|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n+--------------------+--------------------+----------------+--------------------+--------+-------------------+\nonly showing top 40 rows\n\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.apache.spark.sql.functions.concat_ws\nimport org.apache.spark.sql.functions.countDistinct\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer\nimport java.util.Locale\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34morcid_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [doi: string, ORCfullName: string ... 4 more fields]\n\u001b[1m\u001b[34mS2_MAG_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGpaperId: bigint, MAGdoi: string ....\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d2"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d5"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606221610014_51356091",
      "id": "paragraph_1606221610014_51356091",
      "dateCreated": "2020-11-24 14:40:10.014",
      "dateStarted": "2020-12-22 12:02:24.414",
      "dateFinished": "2020-12-22 13:29:04.506",
      "status": "FINISHED"
    },
    {
      "title": "Join ORCiD Data with MAG \u0026 S2 (try to also match with S2_doi)",
      "text": "%spark\n\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\n\n// Specify schema for your csv file\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.spark.sql.functions.concat_ws;\nimport org.apache.spark.sql.functions.countDistinct;\n//import  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer;\nimport java.util.Locale;\nimport org.apache.spark.storage.StorageLevel;\n\n\n\n//val jsondf \u003d spark.read.json(\"/media/datadisk/Datasets/ORCiD/9988322/ORCID_2019_summaries/outgz/0.gz\")\nval orcid_df \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/orcid.parquet\")\n.cache()\n\n\norcid_df.printSchema\nprintln(\"ORCiD cnt:\" + orcid_df.count())\norcid_df.show(40)\n\n\nval S2_MAG_df \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_df.parquet\").filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 $\"S2doi\".isNotNull \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\") //take into consideration the dois which are different in S2\n//.cache()\n\n//S2_MAG_df.groupBy($\"S2doi\").show(10)\n\n//S2_MAG_df.filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 $\"S2doi\".isNotNull \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\")\n//.cache()\n\n//println(\"s2doi diffs cnt:\"+S2_MAG_df.count())\n\n\n//println(\"s2doi diffs cnt:\"+S2_MAG_Orcid_df\n//S2_MAG_df.filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 ($\"magId\".isNotNull) \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\")\n\n\nval S2_MAG_Orcid_df1 \u003d S2_MAG_df\n                   .join(broadcast(orcid_df), S2_MAG_df(\"S2doi\") \u003d\u003d\u003d orcid_df(\"doi\") \u0026\u0026 ( S2_MAG_df(\"S2normName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\") ||  S2_MAG_df(\"S2normName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\") ||  levenshtein($\"S2normName\", $\"ORCnormName\")\u003e0.8  \u0026\u0026 double_metaphone($\"S2normName\") \u003d\u003d\u003d double_metaphone($\"ORCnormName\") ) \n                   , \"inner\")       \n                     .select(S2_MAG_df(\"MAGpaperId\"), S2_MAG_df(\"MAGdoi\"),  S2_MAG_df(\"MAGdisplayName\"), S2_MAG_df(\"MAGname\"), S2_MAG_df(\"MAGnormName\"), \n                            S2_MAG_df(\"MAGshortNormName\"),  S2_MAG_df(\"MAGauthorId\"), S2_MAG_df(\"fosids\"), S2_MAG_df(\"fosids_lvl0\") ,S2_MAG_df(\"fosids_lvl1\"), \n                            S2_MAG_df(\"authorIds\"), S2_MAG_df(\"authorNormNames\"), S2_MAG_df(\"authorShortNormNames\"),S2_MAG_df(\"affiliationIds\"), \n                            S2_MAG_df(\"S2authorId\"),S2_MAG_df(\"S2paperId\"), S2_MAG_df(\"S2doi\"), S2_MAG_df(\"S2name\"), S2_MAG_df(\"S2shortNormName\"), S2_MAG_df(\"S2normName\"), S2_MAG_df(\"S2fos\") , orcid_df(\"orcId\"))\n                            \n                   \nS2_MAG_Orcid_df1.write.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_Orcid_S2doi.parquet\")      \n\n/*\n\nval S2_MAG_Orcid_df2 \u003d S2_MAG_df.filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 $\"S2doi\".isNotNull \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\")\n                   .join(broadcast(orcid_df), S2_MAG_df(\"MAGdoi\") \u003d\u003d\u003d orcid_df(\"doi\") \u0026\u0026 ( S2_MAG_df(\"S2shortNormName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\") ||  S2_MAG_df(\"MAGshortNormName\")\u003d\u003d\u003dorcid_df(\"ORCshortNormName\")   \n                     || (levenshtein(fulltrim($\"MAGname\"), fulltrim($\"orcfullname\"))\u003e0.8  \u0026\u0026 double_metaphone(fulltrim($\"MAGname\")) \u003d\u003d\u003d double_metaphone(fulltrim($\"orcfullname\")) ) \n                   ), \"left_outer\")       \n                     .select(S2_MAG_df(\"MAGpaperId\"), S2_MAG_df(\"MAGdoi\"),  S2_MAG_df(\"MAGdisplayName\"), S2_MAG_df(\"MAGname\"), S2_MAG_df(\"MAGnormName\"), \n                            S2_MAG_df(\"MAGshortNormName\"),  S2_MAG_df(\"MAGauthorId\"), S2_MAG_df(\"fosids\"), S2_MAG_df(\"fosids_lvl0\") ,S2_MAG_df(\"fosids_lvl1\"), \n                            S2_MAG_df(\"authorIds\"), S2_MAG_df(\"authorNormNames\"), S2_MAG_df(\"authorShortNormNames\"),S2_MAG_df(\"affiliationIds\"), \n                            S2_MAG_df(\"S2authorId\"),S2_MAG_df(\"S2paperId\"), S2_MAG_df(\"S2doi\"), S2_MAG_df(\"S2name\"), S2_MAG_df(\"S2shortNormName\"), S2_MAG_df(\"S2normName\"), S2_MAG_df(\"S2fos\") , orcid_df(\"orcId\"))\n                            \n                   //.persist(StorageLevel.DISK_ONLY)\n\n//S2_MAG_Orcid_df.write.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_Orcid.parquet\")      \n\nval S2_MAG_Orcid_df \u003d       S2_MAG_Orcid_df1.union(S2_MAG_Orcid_df2)\n                    .dropDuplicates()\n                    .persist(StorageLevel.DISK_ONLY)\n                    \nS2_MAG_Orcid_df.write.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_Orcid.parquet\")      \n//println(\"ACMsubset cnt:\"+ACMsubsetouter.count())\n//ACMsubsetouter.orderBy(\"MAGshortNormName\").show(100) \n\nprintln(\"Orcid pub cnt:\"+S2_MAG_Orcid_df\n.filter(($\"orcid\" \u003d!\u003d \"\") \u0026\u0026 ($\"orcid\".isNotNull)).count())\n\nval df2 \u003d S2_MAG_Orcid_df.select(countDistinct(\"orcid\"))\ndf2.show(false)\n\n\nval dfMagid \u003d S2_MAG_Orcid_df.select(countDistinct(\"MAGauthorId\"))\ndfMagid.show(false)\n\nval dfS2Id \u003d S2_MAG_Orcid_df.select(countDistinct(\"S2authorId\"))\ndfS2Id.show(false)\n*/\n              \n",
      "user": "anonymous",
      "dateUpdated": "2020-12-08 17:14:08.440",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- doi: string (nullable \u003d true)\n |-- ORCfullName: string (nullable \u003d true)\n |-- ORCshortNormName: string (nullable \u003d true)\n |-- ORCnormName: string (nullable \u003d true)\n |-- pmId: string (nullable \u003d true)\n |-- orcId: string (nullable \u003d true)\n\nORCiD cnt:34108075\n+--------------------+--------------------+----------------+--------------------+--------+-------------------+\n|                 doi|         ORCfullName|ORCshortNormName|         ORCnormName|    pmId|              orcId|\n+--------------------+--------------------+----------------+--------------------+--------+-------------------+\n|10.3389/fpls.2018...|Muhammad Abdul Re...|         mrashid|muhammadabdulrehm...|        |0000-0002-4941-3469|\n|10.1007/978-1-071...|     AlessanRSS Reis|           areis|      alessanrssreis|32857345|0000-0001-8486-7469|\n|10.1007/978-1-071...|     AlessanRSS Reis|           areis|      alessanrssreis|32822033|0000-0001-8486-7469|\n|10.1007/978-1-071...|     AlessanRSS Reis|           areis|      alessanrssreis|32827140|0000-0001-8486-7469|\n|10.1080/14756366....|     AlessanRSS Reis|           areis|      alessanrssreis|32441172|0000-0001-8486-7469|\n|10.1084/jem.20190354|     AlessanRSS Reis|           areis|      alessanrssreis|32860704|0000-0001-8486-7469|\n|10.1080/19336918....|     AlessanRSS Reis|           areis|      alessanrssreis|32538273|0000-0001-8486-7469|\n|10.1080/22221751....|     AlessanRSS Reis|           areis|      alessanrssreis|32228226|0000-0001-8486-7469|\n|10.1080/22221751....|     AlessanRSS Reis|           areis|      alessanrssreis|32284022|0000-0001-8486-7469|\n|10.1080/0886022x....|     AlessanRSS Reis|           areis|      alessanrssreis|31918608|0000-0001-8486-7469|\n|10.1007/s11121-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32504393|0000-0001-8486-7469|\n|10.1007/s12015-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32691369|0000-0001-8486-7469|\n|10.1007/s10461-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32385677|0000-0001-8486-7469|\n|10.1007/s10802-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32648044|0000-0001-8486-7469|\n|10.1166/jnn.2020....|     AlessanRSS Reis|           areis|      alessanrssreis|32384973|0000-0001-8486-7469|\n|10.1080/02699931....|     AlessanRSS Reis|           areis|      alessanrssreis|32883181|0000-0001-8486-7469|\n|10.1186/s12879-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32962655|0000-0001-8486-7469|\n| 10.1055/a-1237-0490|     AlessanRSS Reis|           areis|      alessanrssreis|32961566|0000-0001-8486-7469|\n|10.1001/jamacardi...|     AlessanRSS Reis|           areis|      alessanrssreis|32915194|0000-0001-8486-7469|\n|   10.1002/jmv.26539|     AlessanRSS Reis|           areis|      alessanrssreis|32966614|0000-0001-8486-7469|\n|10.1136/bmjopen-2...|     AlessanRSS Reis|           areis|      alessanrssreis|32895275|0000-0001-8486-7469|\n|10.1007/s00586-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32895774|0000-0001-8486-7469|\n|   10.1111/jdv.16929|     AlessanRSS Reis|           areis|      alessanrssreis|32924186|0000-0001-8486-7469|\n|10.1007/s00038-02...|     AlessanRSS Reis|           areis|      alessanrssreis|32910208|0000-0001-8486-7469|\n|10.1044/2020_jslh...|     AlessanRSS Reis|           areis|      alessanrssreis|32910735|0000-0001-8486-7469|\n|10.1213/ane.00000...|     AlessanRSS Reis|           areis|      alessanrssreis|32459667|0000-0001-8486-7469|\n|10.21037/atm.2020...|     AlessanRSS Reis|           areis|      alessanrssreis|32647727|0000-0001-8486-7469|\n|10.1186/s41038-01...|     AlessanRSS Reis|           areis|      alessanrssreis|30783604|0000-0001-8486-7469|\n| 10.2147/ppa.s175957|     AlessanRSS Reis|           areis|      alessanrssreis|30573952|0000-0001-8486-7469|\n|10.1055/s-0038-16...|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.1590/1413-8123...|     AlessanRSS Reis|           areis|      alessanrssreis|30281726|0000-0001-8486-7469|\n|   10.1002/oby.22035|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.1007/s12144-01...|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.14295/cs.v9i3....|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|  10.1111/micc.12416|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.4012/dmj.2016-430|     AlessanRSS Reis|           areis|      alessanrssreis|29081446|0000-0001-8486-7469|\n|10.1371/journal.p...|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n| 10.1155/2014/753780|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|    10.1037/a0016901|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n|10.1111/j.1463-13...|     AlessanRSS Reis|           areis|      alessanrssreis|        |0000-0001-8486-7469|\n+--------------------+--------------------+----------------+--------------------+--------+-------------------+\nonly showing top 40 rows\n\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.apache.spark.sql.functions.concat_ws\nimport org.apache.spark.sql.functions.countDistinct\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer\nimport java.util.Locale\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34morcid_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [doi: string, ORCfullName: string ... 4 more fields]\n\u001b[1m\u001b[34mS2_MAG_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [MAGpaperId: ...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d2"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://PC192.168.2.5.station:4040/jobs/job?id\u003d5"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1607109007267_267285472",
      "id": "paragraph_1607109007267_267285472",
      "dateCreated": "2020-12-04 21:10:07.267",
      "dateStarted": "2020-12-04 23:46:43.799",
      "dateFinished": "2020-12-05 02:25:36.054",
      "status": "FINISHED"
    },
    {
      "text": "%spark\n\nval S2_MAG_Orciddf \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_Orcid.parquet\").dropDuplicates()\n\nprintln(\"S2_MAG_Orcid cnt:\" + S2_MAG_Orciddf.count())\n\nval S2_MAG_Orcid_orcid \u003d S2_MAG_Orciddf.filter($\"orcId\"\u003d!\u003d\"\"  \u0026\u0026 $\"orcId\".isNotNull)\n.cache()\n\n//S2_MAG_Orcid_S2doi.printSchema\nprintln(\"S2_MAG_Orcid_orcid cnt:\" + S2_MAG_Orcid_orcid.count())\n//S2_MAG_Orcid_S2doi.show(40)\n\nS2_MAG_Orcid_orcid.select(countDistinct(\"orcId\")).show(false)\nS2_MAG_Orcid_orcid.select(countDistinct(\"MAGpaperId\")).show(false)\n\n\n\n//S2_MAG_Orcid_S2doi cnt:816642169\n//                        49376386\n// \n\n//S2_MAG_Orcid_df1.write.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_Orcid_S2doi.parquet\")      ",
      "user": "anonymous",
      "dateUpdated": "2020-12-22 16:29:24.032",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "S2_MAG_Orcid cnt:661650778\nS2_MAG_Orcid_orcid cnt:31657984\n+---------------------+\n|count(DISTINCT orcId)|\n+---------------------+\n|1943462              |\n+---------------------+\n\n+--------------------------+\n|count(DISTINCT MAGpaperId)|\n+--------------------------+\n|18095040                  |\n+--------------------------+\n\n\u001b[1m\u001b[34mS2_MAG_Orciddf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [MAGpaperId: bigint, MAGdoi: string ... 20 more fields]\n\u001b[1m\u001b[34mS2_MAG_Orcid_orcid\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [MAGpaperId: bigint, MAGdoi: string ... 20 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d8"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d9"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d10"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d11"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d12"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1607153353572_852553936",
      "id": "paragraph_1607153353572_852553936",
      "dateCreated": "2020-12-05 09:29:13.572",
      "dateStarted": "2020-12-22 16:29:24.037",
      "dateFinished": "2020-12-22 18:59:05.924",
      "status": "FINISHED"
    },
    {
      "title": "Test normalization functions",
      "text": "%spark\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport java.util.Locale;\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\n\n\nval a \u003d 100\nprintln(a)\n\n\n\ndef normName1(e:String): String \u003d {\n    \n return org.apache.commons.lang3.StringUtils.stripAccents(e.toLowerCase(Locale.ENGLISH))\n     .replaceAll(\"[ \u003c\u003e:´,’./\\\\\u0027\\\\\\\";(){}!@#$%^\u0026+‐–*\\\\\\\\-]+\", \"\")\n    .replaceAll(\"Æ\", \"AE\")\n    .replaceAll(\"Ð\", \"D\")\n    .replaceAll(\"Ø\", \"O\")\n    .replaceAll(\"Þ\", \"TH\")\n    .replaceAll(\"ß\", \"ss\")\n    .replaceAll(\"ð\", \"d\")\n    .replaceAll(\"æ\", \"ae\")\n    .replaceAll(\"ø\", \"o\")\n    .replaceAll(\"þ\", \"th\")\n    .replaceAll(\"Œ\", \"OE\")\n    .replaceAll(\"œ\", \"oe\")\n    .replaceAll(\"ƒ\", \"f\")\n\t.trim()\n    \n}\ndef shortNormName1(e: String): String \u003d {\n  val normname \u003d org.apache.commons.lang3.StringUtils.stripAccents(e.toLowerCase(Locale.ENGLISH))\n    //.replaceAll(\"[^\\\\p{ASCII}]\", \"\")\n     .replaceAll(\"[\u003c\u003e:´,’./\\\\\u0027\\\\\\\";(){}!@#$%^\u0026+‐–*\\\\\\\\-]+\", \"\")\n    .replaceAll(\"Æ\", \"AE\")\n    .replaceAll(\"Ð\", \"D\")\n    .replaceAll(\"Ø\", \"O\")\n    .replaceAll(\"Þ\", \"TH\")\n    .replaceAll(\"ß\", \"ss\")\n    .replaceAll(\"ð\", \"d\")\n    .replaceAll(\"æ\", \"ae\")\n    .replaceAll(\"ø\", \"o\")\n    .replaceAll(\"þ\", \"th\")\n    .replaceAll(\"Œ\", \"OE\")\n    .replaceAll(\"œ\", \"oe\")\n    .replaceAll(\"ƒ\", \"f\")\n\t.trim().split(\" \")\n    \n\n val shortName \u003d  if (normname.length \u003d\u003d 1) normname(0) else normname(0).take(1) + normname(normname.length-1)\n \n return  shortName\n  \n}\n\n//\"合阪  幸三\",\"平池  春子\",\"兵藤  博恵\",\"生月  弓子\",\"秋山  純子\",\"木村  好秀\",\"岡田  紀三男\",\"小畑  清一郎\",\"宮本  雄一郎\",\"平池  修\",\"兵藤  博信\",\"森  宏之\"],\"S2shortNormNames\":[\"合阪幸三\",\"平池春子\",\"兵藤博恵\",\"生月弓子\",\"秋山純子\",\"木村好秀\",\"岡田紀三男\",\"小畑清一郎\",\"宮本雄一郎\",\"平池修\",\"兵藤博信\",\"森宏之\"],\"S2normNames\":[\"合阪幸三\",\"平池春子\",\"兵藤博恵\",\"生月弓子\",\"秋山純子\",\"木村好秀\",\"岡田紀三男\",\"小畑清一郎\",\"宮本雄一郎\",\"平池修\",\"兵藤博信\",\"森宏之\"\n//println(\"chinese:\"+ unaccent2(\"福村 健\"))\n\nprintln(normName1(\"合阪  幸三\"))\nprintln(shortNormName1(\"合阪  幸三\"))\n\nprintln(normName1(\"兵藤  博恵\"))\nprintln(shortNormName1(\"兵藤  博恵\"))\n\nprintln(normName1(\"С.В.  Гувернюк\"))\nprintln(shortNormName1(\"С.В.  Гувернюк\"))\n\nprintln(normName1(\"C. E. Pankhurst\"))\nprintln(shortNormName1(\"C. E. Pankhurst\"))\n\n\nif (shortNormName1(\"合阪  幸三\")\u003d\u003dshortNormName1(\"兵藤  博恵\")) println(\"short names match\")\n\nif (shortNormName1(\"合阪  幸三\")\u003d\u003dshortNormName1(\"平池  春子\")) println(\"short names match\")\n\n//if (double_metaphone(normName(\"合阪  幸三\"))\u003d\u003ddouble_metaphone(normName(\"兵藤  博恵\")) ) println(\"names match\")\n\nval df1 \u003d spark.createDataFrame(Seq((1, \"andy\", 20, \"USA\"), (2, \"jeff\", 23, \"China\"), (3, \"james\", 18, \"USA\"))).toDF(\"id\", \"name\", \"age\", \"country\")\n\nval sourceDF \u003d spark.createDataFrame(\n      Seq(\n          \n          (\"WeiQi Li\", \"Wei Li\"),\n          (\"D. Nenad\", \"T. Nenad\"),\n          (\"Van Vase\", \"Van Vaese\"),\n          (\"Van Vosse\", \"Van Voese\"),\n          (\"Van Vosse\", \"Ban Voshe\"),\n          (\"С.В.  Гувернюк\", \"Я.А.  Дынников\"),\n          (\"Marco  Apitz\",\"Marc  Opitz\"),\n          (\"Л.  Туйчиев\",\"Ш.  Туйчиев\"),\n          (\"mjillera\", \"millera\"),\n          (\"Ю.  Юров\",\"Ю. Б. Юров\"),\n          (\"В А Таряник\",\"В О Таряник\"),\n          (\"C. E. Pankhurst\",\"C.  Pankhurst\"),\n          (\"B  Geavlete\",\"P  Geavlete\"),\n          (\"Vladimiras  Bondarenko\",\"Vladimiras  Bondarenka\"),\n          (\"Quentin  Bonnardβ\",\"Quentin  Bonnard\"),\n          (\"А. С. Шуваев\",\"Н. С. Шуваев\"),\n          (\"Tong Bou Chang\",\"Tong-Bou  Chang\"),\n          (\"Zhong  Feng\",\"Zhong  Fei\"),\n          (\"Д. А. Минченко\",\"Т. А. Зинченко\"),\n          (\"合阪  幸三\", \"平池  春子\")\n        \n        )).toDF(\"word1\", \"word2\")\n        \n      /*\n        List(\n          (\"合阪  幸三\", \"兵藤  博恵\"),\n          (\"合阪  幸三\", \"平池  春子\")\n          \n        ), List(\n          (\"word1\", StringType, true),\n          (\"word2\", StringType, true)\n        )\n      )*/\n\nval levDF \u003d sourceDF.withColumn(\n        \"w1_w2_lev\",\n        levenshtein(col(\"word1\"), col(\"word2\"))\n      ).show()\n      \n      val actualDF \u003d sourceDF.withColumn(\n        \"w1_w2_jaro_winkler\",\n        jaro_winkler(col(\"word1\"), col(\"word2\"))\n      ).show()\n\n\n   val actualDF2 \u003d sourceDF.withColumn(\n        \"w1_w2_jaccard\",\n        jaccard_similarity(col(\"word1\"), col(\"word2\"))\n      ).show()\n      \n        val actualDF3 \u003d sourceDF.withColumn(\n        \"word1_double_metaphone\",\n        double_metaphone(col(\"word1\"))\n      )\n      .withColumn(\n        \"word2_double_metaphone\",\n        double_metaphone(col(\"word2\"))\n        )\n        .show()\n        \n        val actualDF4 \u003d sourceDF.withColumn(\n        \"word1_soundex\",\n        soundex(col(\"word1\"))\n      )\n      .withColumn(\n        \"word2_soundex\",\n        soundex(col(\"word2\"))\n        )\n        .show()\n      \n      \n      val compdf \u003d sourceDF.filter( shortNormName($\"word1\")\u003d\u003d\u003dshortNormName($\"word2\")).show()\n      \n      val compdf2 \u003d sourceDF.filter( levenshtein( normName($\"word1\"), normName($\"word2\"))\u003e0.8   ).show() \n      \n      val compdf3 \u003d sourceDF.filter(length(double_metaphone(normName($\"word1\")))\u003e1 \u0026\u0026  double_metaphone(normName($\"word1\")) \u003d\u003d\u003d double_metaphone(normName($\"word2\"))) .show() \n      \n      \n      val compdf4 \u003d sourceDF.filter(shortNormName($\"word1\")\u003d\u003d\u003dshortNormName($\"word2\") || ( jaro_winkler(normName($\"word1\"),normName($\"word2\"))\u003e0.8  \u0026\u0026  levenshtein(normName($\"word1\"), normName($\"word2\"))\u003c2  \u0026\u0026 double_metaphone(normName($\"word1\")) \u003d\u003d\u003d double_metaphone(normName($\"word2\")) )).show() \n//( levenshtein($\"normName\", $\"S2normName\")\u003e0.8  \u0026\u0026 double_metaphone($\"normName\") \u003d\u003d\u003d double_metaphone($\"S2normName\") )\n\n\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-22 12:02:11.916",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "100\n合阪幸三\n合幸三\n兵藤博恵\n兵博恵\nсвгувернюк\nсгувернюк\ncepankhurst\ncpankhurst\n+--------------------+--------------------+---------+\n|               word1|               word2|w1_w2_lev|\n+--------------------+--------------------+---------+\n|            WeiQi Li|              Wei Li|        2|\n|            D. Nenad|            T. Nenad|        1|\n|            Van Vase|           Van Vaese|        1|\n|           Van Vosse|           Van Voese|        1|\n|           Van Vosse|           Ban Voshe|        2|\n|      С.В.  Гувернюк|      Я.А.  Дынников|       10|\n|        Marco  Apitz|         Marc  Opitz|        2|\n|         Л.  Туйчиев|         Ш.  Туйчиев|        1|\n|            mjillera|             millera|        1|\n|            Ю.  Юров|          Ю. Б. Юров|        2|\n|         В А Таряник|         В О Таряник|        1|\n|     C. E. Pankhurst|       C.  Pankhurst|        2|\n|         B  Geavlete|         P  Geavlete|        1|\n|Vladimiras  Bonda...|Vladimiras  Bonda...|        1|\n|   Quentin  Bonnardβ|    Quentin  Bonnard|        1|\n|        А. С. Шуваев|        Н. С. Шуваев|        1|\n|      Tong Bou Chang|     Tong-Bou  Chang|        2|\n|         Zhong  Feng|          Zhong  Fei|        2|\n|      Д. А. Минченко|      Т. А. Зинченко|        2|\n|          合阪  幸三|          平池  春子|        4|\n+--------------------+--------------------+---------+\n\n+--------------------+--------------------+------------------+\n|               word1|               word2|w1_w2_jaro_winkler|\n+--------------------+--------------------+------------------+\n|            WeiQi Li|              Wei Li|0.8833333333333334|\n|            D. Nenad|            T. Nenad|0.9166666666666666|\n|            Van Vase|           Van Vaese|0.9527777777777777|\n|           Van Vosse|           Van Voese|0.9305555555555555|\n|           Van Vosse|           Ban Voshe|0.8518518518518517|\n|      С.В.  Гувернюк|      Я.А.  Дынников|0.5952380952380952|\n|        Marco  Apitz|         Marc  Opitz|0.9484848484848484|\n|         Л.  Туйчиев|         Ш.  Туйчиев|0.9393939393939394|\n|            mjillera|             millera|            0.9625|\n|            Ю.  Юров|          Ю. Б. Юров|0.9533333333333333|\n|         В А Таряник|         В О Таряник|0.9515151515151515|\n|     C. E. Pankhurst|       C.  Pankhurst|0.9688888888888889|\n|         B  Geavlete|         P  Geavlete|0.9393939393939394|\n|Vladimiras  Bonda...|Vladimiras  Bonda...|0.9818181818181818|\n|   Quentin  Bonnardβ|    Quentin  Bonnard|0.9882352941176471|\n|        А. С. Шуваев|        Н. С. Шуваев|0.9444444444444443|\n|      Tong Bou Chang|     Tong-Bou  Chang| 0.958095238095238|\n|         Zhong  Feng|          Zhong  Fei|0.9436363636363637|\n|      Д. А. Минченко|      Т. А. Зинченко|0.9047619047619048|\n|          合阪  幸三|          平池  春子|0.5555555555555555|\n+--------------------+--------------------+------------------+\n\n+--------------------+--------------------+-------------+\n|               word1|               word2|w1_w2_jaccard|\n+--------------------+--------------------+-------------+\n|            WeiQi Li|              Wei Li|         0.83|\n|            D. Nenad|            T. Nenad|         0.78|\n|            Van Vase|           Van Vaese|          1.0|\n|           Van Vosse|           Van Voese|          1.0|\n|           Van Vosse|           Ban Voshe|         0.78|\n|      С.В.  Гувернюк|      Я.А.  Дынников|         0.28|\n|        Marco  Apitz|         Marc  Opitz|         0.75|\n|         Л.  Туйчиев|         Ш.  Туйчиев|         0.82|\n|            mjillera|             millera|         0.86|\n|            Ю.  Юров|          Ю. Б. Юров|         0.86|\n|         В А Таряник|         В О Таряник|         0.82|\n|     C. E. Pankhurst|       C.  Pankhurst|         0.92|\n|         B  Geavlete|         P  Geavlete|         0.78|\n|Vladimiras  Bonda...|Vladimiras  Bonda...|          1.0|\n|   Quentin  Bonnardβ|    Quentin  Bonnard|         0.92|\n|        А. С. Шуваев|        Н. С. Шуваев|          0.8|\n|      Tong Bou Chang|     Tong-Bou  Chang|         0.91|\n|         Zhong  Feng|          Zhong  Fei|         0.89|\n|      Д. А. Минченко|      Т. А. Зинченко|         0.69|\n|          合阪  幸三|          平池  春子|         0.11|\n+--------------------+--------------------+-------------+\n\n+--------------------+--------------------+----------------------+----------------------+\n|               word1|               word2|word1_double_metaphone|word2_double_metaphone|\n+--------------------+--------------------+----------------------+----------------------+\n|            WeiQi Li|              Wei Li|                   AKL|                    AL|\n|            D. Nenad|            T. Nenad|                  TNNT|                  TNNT|\n|            Van Vase|           Van Vaese|                  FNFS|                  FNFS|\n|           Van Vosse|           Van Voese|                  FNFS|                  FNFS|\n|           Van Vosse|           Ban Voshe|                  FNFS|                  PNFX|\n|      С.В.  Гувернюк|      Я.А.  Дынников|                      |                      |\n|        Marco  Apitz|         Marc  Opitz|                  MRKP|                  MRKP|\n|         Л.  Туйчиев|         Ш.  Туйчиев|                      |                      |\n|            mjillera|             millera|                  MJLR|                   MLR|\n|            Ю.  Юров|          Ю. Б. Юров|                      |                      |\n|         В А Таряник|         В О Таряник|                      |                      |\n|     C. E. Pankhurst|       C.  Pankhurst|                  KPNK|                  KPNK|\n|         B  Geavlete|         P  Geavlete|                  PJFL|                  PJFL|\n|Vladimiras  Bonda...|Vladimiras  Bonda...|                  FLTM|                  FLTM|\n|   Quentin  Bonnardβ|    Quentin  Bonnard|                  KNTN|                  KNTN|\n|        А. С. Шуваев|        Н. С. Шуваев|                      |                      |\n|      Tong Bou Chang|     Tong-Bou  Chang|                  TNKP|                  TNKP|\n|         Zhong  Feng|          Zhong  Fei|                  JNKF|                  JNKF|\n|      Д. А. Минченко|      Т. А. Зинченко|                      |                      |\n|          合阪  幸三|          平池  春子|                      |                      |\n+--------------------+--------------------+----------------------+----------------------+\n\n+--------------------+--------------------+--------------+--------------+\n|               word1|               word2| word1_soundex| word2_soundex|\n+--------------------+--------------------+--------------+--------------+\n|            WeiQi Li|              Wei Li|          W240|          W400|\n|            D. Nenad|            T. Nenad|          D553|          T553|\n|            Van Vase|           Van Vaese|          V512|          V512|\n|           Van Vosse|           Van Voese|          V512|          V512|\n|           Van Vosse|           Ban Voshe|          V512|          B512|\n|      С.В.  Гувернюк|      Я.А.  Дынников|С.В.  Гувернюк|Я.А.  Дынников|\n|        Marco  Apitz|         Marc  Opitz|          M621|          M621|\n|         Л.  Туйчиев|         Ш.  Туйчиев|   Л.  Туйчиев|   Ш.  Туйчиев|\n|            mjillera|             millera|          M246|          M460|\n|            Ю.  Юров|          Ю. Б. Юров|      Ю.  Юров|    Ю. Б. Юров|\n|         В А Таряник|         В О Таряник|   В А Таряник|   В О Таряник|\n|     C. E. Pankhurst|       C.  Pankhurst|          C152|          C152|\n|         B  Geavlete|         P  Geavlete|          B214|          P214|\n|Vladimiras  Bonda...|Vladimiras  Bonda...|          V435|          V435|\n|   Quentin  Bonnardβ|    Quentin  Bonnard|          Q535|          Q535|\n|        А. С. Шуваев|        Н. С. Шуваев|  А. С. Шуваев|  Н. С. Шуваев|\n|      Tong Bou Chang|     Tong-Bou  Chang|          T521|          T521|\n|         Zhong  Feng|          Zhong  Fei|          Z521|          Z521|\n|      Д. А. Минченко|      Т. А. Зинченко|Д. А. Минченко|Т. А. Зинченко|\n|          合阪  幸三|          平池  春子|    合阪  幸三|    平池  春子|\n+--------------------+--------------------+--------------+--------------+\n\n+---------------+---------------+\n|          word1|          word2|\n+---------------+---------------+\n|       WeiQi Li|         Wei Li|\n|       Ю.  Юров|     Ю. Б. Юров|\n|    В А Таряник|    В О Таряник|\n|C. E. Pankhurst|  C.  Pankhurst|\n| Tong Bou Chang|Tong-Bou  Chang|\n+---------------+---------------+\n\n+--------------------+--------------------+\n|               word1|               word2|\n+--------------------+--------------------+\n|            WeiQi Li|              Wei Li|\n|            D. Nenad|            T. Nenad|\n|            Van Vase|           Van Vaese|\n|           Van Vosse|           Van Voese|\n|           Van Vosse|           Ban Voshe|\n|      С.В.  Гувернюк|      Я.А.  Дынников|\n|        Marco  Apitz|         Marc  Opitz|\n|         Л.  Туйчиев|         Ш.  Туйчиев|\n|            mjillera|             millera|\n|            Ю.  Юров|          Ю. Б. Юров|\n|         В А Таряник|         В О Таряник|\n|     C. E. Pankhurst|       C.  Pankhurst|\n|         B  Geavlete|         P  Geavlete|\n|Vladimiras  Bonda...|Vladimiras  Bonda...|\n|   Quentin  Bonnardβ|    Quentin  Bonnard|\n|        А. С. Шуваев|        Н. С. Шуваев|\n|         Zhong  Feng|          Zhong  Fei|\n|      Д. А. Минченко|      Т. А. Зинченко|\n|          合阪  幸三|          平池  春子|\n+--------------------+--------------------+\n\n+--------------------+--------------------+\n|               word1|               word2|\n+--------------------+--------------------+\n|            D. Nenad|            T. Nenad|\n|            Van Vase|           Van Vaese|\n|           Van Vosse|           Van Voese|\n|        Marco  Apitz|         Marc  Opitz|\n|         B  Geavlete|         P  Geavlete|\n|Vladimiras  Bonda...|Vladimiras  Bonda...|\n|   Quentin  Bonnardβ|    Quentin  Bonnard|\n|      Tong Bou Chang|     Tong-Bou  Chang|\n|         Zhong  Feng|          Zhong  Fei|\n+--------------------+--------------------+\n\n+--------------------+--------------------+\n|               word1|               word2|\n+--------------------+--------------------+\n|            WeiQi Li|              Wei Li|\n|            D. Nenad|            T. Nenad|\n|            Van Vase|           Van Vaese|\n|           Van Vosse|           Van Voese|\n|        Marco  Apitz|         Marc  Opitz|\n|         Л.  Туйчиев|         Ш.  Туйчиев|\n|            Ю.  Юров|          Ю. Б. Юров|\n|         В А Таряник|         В О Таряник|\n|     C. E. Pankhurst|       C.  Pankhurst|\n|         B  Geavlete|         P  Geavlete|\n|Vladimiras  Bonda...|Vladimiras  Bonda...|\n|   Quentin  Bonnardβ|    Quentin  Bonnard|\n|        А. С. Шуваев|        Н. С. Шуваев|\n|      Tong Bou Chang|     Tong-Bou  Chang|\n+--------------------+--------------------+\n\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport java.util.Locale\nimport com.github.mrpowers.spark.stringmetric.SimilarityFunctions._\nimport com.github.mrpowers.spark.stringmetric.PhoneticAlgorithms._\n\u001b[1m\u001b[34ma\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m \u003d 100\n\u001b[1m\u001b[34mnormName1\u001b[0m: \u001b[1m\u001b[32m(e: String)String\u001b[0m\n\u001b[1m\u001b[34mshortNormName1\u001b[0m: \u001b[1m\u001b[32m(e: String)String\u001b[0m\n\u001b[1m\u001b[34mdf1\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [id: int, name: string ... 2 more fields]\n\u001b[1m\u001b[34msourceDF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [word1: string, word2: string]\n\u001b[1m\u001b[34mlevDF\u001b[0m: \u001b[1m\u001b[32mUnit\u001b[0m \u003d ()\n\u001b[1m\u001b[34mactualDF\u001b[0m: \u001b[1m\u001b[32mUnit\u001b[0m \u003d ()\n\u001b[1m\u001b[34mactualDF2\u001b[0m: \u001b[1m\u001b[32mUnit\u001b[0m \u003d ()\n\u001b[1m\u001b[34mactualDF3\u001b[0m: \u001b[1m\u001b[32mUnit\u001b[0m \u003d ()\n\u001b[1m\u001b[34mactualDF4...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606472529243_799120251",
      "id": "paragraph_1606472529243_799120251",
      "dateCreated": "2020-11-27 12:22:09.243",
      "dateStarted": "2020-12-22 12:02:11.923",
      "dateFinished": "2020-12-22 12:02:13.600",
      "status": "FINISHED"
    },
    {
      "title": "Explode Affiliations \u0026 add seqNum ",
      "text": "%spark\n\n// Specify schema for your csv file\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.spark.sql.functions.concat_ws;\nimport org.apache.spark.sql.functions.countDistinct;\n//import  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer;\nimport java.util.Locale;\nimport org.apache.spark.storage.StorageLevel;\n\n\nval MAG_HOME \u003d \"/media/datadisk/Datasets/MAG/20201109/mag\"\nval paperAuthorsAffTsvFilename \u003d \"PaperAuthorAffiliations.txt\"\n\n\nval paperAuthorAffSchema \u003d new StructType().\n                add(\"paperId\", LongType, false).\n                add(\"authorId\", LongType, false).                \n                add(\"affiliationId\", LongType, true).\n                add(\"authorSequenceNumber\",IntegerType, true).\n                add(\"originalAuthor\", StringType, true).\n                add(\"originalAffiliation\", StringType, true)\n\n                \nval paperAuthorAffdf \u003d spark.read.options(Map(\"sep\"-\u003e\"\\t\", \"header\"-\u003e \"false\")).\n                schema(paperAuthorAffSchema).\n                csv(s\"file://$MAG_HOME/$paperAuthorsAffTsvFilename\")\n                .persist(StorageLevel.DISK_ONLY)\n\n\nprintln(\"paperAuthorAffdf cnt:\" + paperAuthorAffdf.count())\nval paperIdsdf \u003d paperAuthorAffdf.select(countDistinct(\"paperId\"))\npaperIdsdf.show(false)\nval authorIdsdf \u003d paperAuthorAffdf.select(countDistinct(\"authorId\")) \nauthorIdsdf.show(false)\n\n\n\nval S2_MAG_df \u003d spark.read.parquet(\"/media/ometaxas/nvme/datasets/MAG_S2/S2_MAG_Orcid.parquet\")\n\nprintln(\"paperAuthorAffdf cnt:\" + S2_MAG_df.count())\nval paperIdsdf2 \u003d S2_MAG_df.select(countDistinct(\"MAGpaperId\")) \npaperIdsdf2.show(false)\nval authorIdsdf2 \u003d S2_MAG_df.select(countDistinct(\"MAGauthorId\")) \nauthorIdsdf2.show(false)\n\n/*\n        .select(S2_MAG_df(\"MAGpaperId\"), S2_MAG_df(\"MAGdoi\"),  S2_MAG_df(\"MAGdisplayName\"), S2_MAG_df(\"MAGname\"), S2_MAG_df(\"MAGnormName\"), \n                            S2_MAG_df(\"MAGshortNormName\"),  S2_MAG_df(\"MAGauthorId\"), S2_MAG_df(\"fosids\"), S2_MAG_df(\"fosids_lvl0\") ,S2_MAG_df(\"fosids_lvl1\"), \n                            S2_MAG_df(\"authorIds\"), S2_MAG_df(\"authorNormNames\"), S2_MAG_df(\"authorShortNormNames\"),S2_MAG_df(\"affiliationIds\"), \n                            S2_MAG_df(\"S2authorId\"),S2_MAG_df(\"S2paperId\"), S2_MAG_df(\"S2doi\"), S2_MAG_df(\"S2name\"), S2_MAG_df(\"S2shortNormName\"), S2_MAG_df(\"S2normName\"), S2_MAG_df(\"S2fos\") , orcid_df(\"orcId\"))\n                            \n*/\n\nval PKGinitdf \u003d paperAuthorAffdf\n                   .join(S2_MAG_df, paperAuthorAffdf(\"paperId\") \u003d\u003d\u003d S2_MAG_df(\"MAGpaperId\")  \u0026\u0026  paperAuthorAffdf(\"authorId\")\u003d\u003d\u003dS2_MAG_df(\"MAGauthorId\") , \"inner\")                  \n                   .select(S2_MAG_df(\"MAGpaperId\"),   S2_MAG_df(\"MAGauthorId\"), paperAuthorAffdf(\"affiliationId\"), paperAuthorAffdf(\"authorSequenceNumber\"), \n                          S2_MAG_df(\"S2authorId\"),S2_MAG_df(\"S2paperId\"),S2_MAG_df(\"orcId\"))\n                          \nPKGinitdf.write.parquet(\"/media/datadisk/Datasets/MAG_S2/PKGinitdf.parquet\")                    ",
      "user": "anonymous",
      "dateUpdated": "2020-12-23 09:32:12.856",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "paperAuthorAffdf cnt:667787869\n+-----------------------+\n|count(DISTINCT paperId)|\n+-----------------------+\n|245973483              |\n+-----------------------+\n\n+------------------------+\n|count(DISTINCT authorId)|\n+------------------------+\n|260831808               |\n+------------------------+\n\npaperAuthorAffdf cnt:661651048\n+--------------------------+\n|count(DISTINCT MAGpaperId)|\n+--------------------------+\n|245973406                 |\n+--------------------------+\n\n+---------------------------+\n|count(DISTINCT MAGauthorId)|\n+---------------------------+\n|260831009                  |\n+---------------------------+\n\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.apache.spark.sql.functions.concat_ws\nimport org.apache.spark.sql.functions.countDistinct\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer\nimport java.util.Locale\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34mMAG_HOME\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m \u003d /media/datadisk/Datasets/MAG/20201109/mag\n\u001b[1m\u001b[34mpaperAuthorsAffTsvFilename\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m \u003d PaperAuthorAffiliations.txt\n\u001b[1m\u001b[34mpaperAuthorAffSchema\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.types.StructType\u001b[0m \u003d StructType(StructField(paperId,LongType,false), StructField(authorId,LongType,false), StructField(affiliationId,LongType,t...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d2"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d3"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d4"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d5"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d6"
            },
            {
              "jobUrl": "http://PC192.168.2.7.station:4040/jobs/job?id\u003d7"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606036250517_213251448",
      "id": "paragraph_1606036250517_213251448",
      "dateCreated": "2020-11-22 11:10:50.517",
      "dateStarted": "2020-12-23 09:32:12.860",
      "dateFinished": "2020-12-23 09:56:40.786",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nimport org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.spark.sql.functions.concat_ws;\nimport org.apache.spark.sql.functions.countDistinct;\n//import  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer;\nimport java.util.Locale;\nimport org.apache.spark.storage.StorageLevel;\n\nval PKG_init_df \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/PKGinitdf.parquet\")\n\nPKG_init_df.limit(1000000).coalesce(1).write.parquet(\"/media/datadisk/Datasets/MAG_S2/PKGinitdf_1M.parquet\")                    ",
      "user": "anonymous",
      "dateUpdated": "2021-01-04 15:02:00.992",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql.types._\nimport org.apache.commons.lang.StringUtils\nimport java.lang.Integer.parseInt\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.apache.spark.sql.functions.concat_ws\nimport org.apache.spark.sql.functions.countDistinct\nimport org.apache.commons.lang3.StringUtils\nimport java.text.Normalizer\nimport java.util.Locale\nimport org.apache.spark.storage.StorageLevel\n\u001b[1m\u001b[34mPKG_init_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [MAGpaperId: bigint, MAGauthorId: bigint ... 5 more fields]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://192.168.2.7:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://192.168.2.7:4040/jobs/job?id\u003d1"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1609765043598_2145293281",
      "id": "paragraph_1609765043598_2145293281",
      "dateCreated": "2021-01-04 14:57:23.598",
      "dateStarted": "2021-01-04 15:02:00.998",
      "dateFinished": "2021-01-04 15:09:49.178",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nimport org.apache.spark.storage.StorageLevel;\nimport org.apache.spark.sql.functions.countDistinct;\nimport  org.apache.spark.sql.functions._\nimport org.apache.commons.lang3.StringUtils;\nimport java.util.Calendar;\n\n\n\nval S2_MAG_df \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/S2_MAG_df.parquet\")\nprintln(\"S2_MAG_df cnt:\"+S2_MAG_df.count())\n\nval S2_MAG_df_diffs \u003d S2_MAG_df.filter($\"S2doi\"\u003d!\u003d\"\"  \u0026\u0026 $\"S2doi\".isNotNull \u0026\u0026 $\"S2doi\"\u003d!\u003d$\"MAGdoi\")\n    .cache()\n\nprintln(\"s2doi diffs cnt:\"+S2_MAG_df_diffs.count())\nprintln(Calendar.getInstance().getTime())\n\n/*\nprintln(Calendar.getInstance().getTime())\nS2_MAG_df.groupBy($\"MAGdoi\")\n.agg( collect_list($\"MAGshortNormName\") as \"magauthors\", collect_list($\"S2shortNormName\") as \"s2authors\").show(10)\n\nprintln(Calendar.getInstance().getTime())\n*/\n\n//val dfdoidiffs \u003d S2_MAG_df.select(countDistinct(\"S2doi\"))\n//dfdoidiffs.show(false)\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-12-01 11:30:11.879",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "org.apache.spark.sql.AnalysisException: Path does not exist: file:/media/datadisk/Datasets/MAG_S2/S2_MAG_df.parquet;\n  at org.apache.spark.sql.execution.datasources.DataSource$.$anonfun$checkAndGlobPathIfNecessary$1(DataSource.scala:764)\n  at scala.collection.TraversableLike.$anonfun$flatMap$1(TraversableLike.scala:245)\n  at scala.collection.immutable.List.foreach(List.scala:392)\n  at scala.collection.TraversableLike.flatMap(TraversableLike.scala:245)\n  at scala.collection.TraversableLike.flatMap$(TraversableLike.scala:242)\n  at scala.collection.immutable.List.flatMap(List.scala:355)\n  at org.apache.spark.sql.execution.datasources.DataSource$.checkAndGlobPathIfNecessary(DataSource.scala:751)\n  at org.apache.spark.sql.execution.datasources.DataSource.checkAndGlobPathIfNecessary(DataSource.scala:580)\n  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:405)\n  at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:297)\n  at org.apache.spark.sql.DataFrameReader.$anonfun$load$2(DataFrameReader.scala:286)\n  at scala.Option.getOrElse(Option.scala:189)\n  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:286)\n  at org.apache.spark.sql.DataFrameReader.parquet(DataFrameReader.scala:755)\n  at org.apache.spark.sql.DataFrameReader.parquet(DataFrameReader.scala:733)\n  ... 49 elided\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606292346869_653532528",
      "id": "paragraph_1606292346869_653532528",
      "dateCreated": "2020-11-25 10:19:06.869",
      "dateStarted": "2020-12-01 11:30:11.882",
      "dateFinished": "2020-12-01 11:30:12.172",
      "status": "ERROR"
    },
    {
      "title": "Statistics ",
      "text": "%spark\n\nval orcid_df \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/orcid.parquet\")\n.cache()\n\nprintln(\"paperAuthorAffdf cnt:\" + orcid_df.count())\nval paperIdsdf4 \u003d orcid_df.select(countDistinct(\"doi\")) \npaperIdsdf4.show(false)\nval authorIdsdf4 \u003d orcid_df.select(countDistinct(\"orcId\")) \nauthorIdsdf4.show(false)\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-24 11:13:27.069",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "paperAuthorAffdf cnt:34108075\n+-------------------+\n|count(DISTINCT doi)|\n+-------------------+\n|20145324           |\n+-------------------+\n\n+---------------------+\n|count(DISTINCT orcId)|\n+---------------------+\n|2110177              |\n+---------------------+\n\n\u001b[1m\u001b[34morcid_df\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [doi: string, ORCfullName: string ... 4 more fields]\n\u001b[1m\u001b[34mpaperIdsdf4\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [count(DISTINCT doi): bigint]\n\u001b[1m\u001b[34mauthorIdsdf4\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [count(DISTINCT orcId): bigint]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d1"
            },
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d2"
            },
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d3"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606138331418_98467935",
      "id": "paragraph_1606138331418_98467935",
      "dateCreated": "2020-11-23 15:32:11.418",
      "dateStarted": "2020-11-23 20:35:07.694",
      "dateFinished": "2020-11-23 20:35:45.582",
      "status": "FINISHED"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-24 11:12:50.591",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606209170591_423055544",
      "id": "paragraph_1606209170591_423055544",
      "dateCreated": "2020-11-24 11:12:50.591",
      "status": "READY"
    },
    {
      "text": "%spark\nval PKGinitdf \u003d spark.read.parquet(\"/media/datadisk/Datasets/MAG_S2/PKGinitdf.parquet\")\n.persist(StorageLevel.DISK_ONLY)\n\nprintln(\"paperAuthorAffdf cnt:\" + PKGinitdf.count())\nval paperIdsdf3 \u003d PKGinitdf.select(countDistinct(\"MAGpaperId\")) \npaperIdsdf3.show(false)\nval authorIdsdf3 \u003d PKGinitdf.select(countDistinct(\"MAGauthorId\")) \nauthorIdsdf3.show(false)\n\nPKGinitdf.show(20)\n",
      "user": "anonymous",
      "dateUpdated": "2020-11-22 18:04:36.521",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "paperAuthorAffdf cnt:661888441\n+--------------------------+\n|count(DISTINCT MAGpaperId)|\n+--------------------------+\n|243110801                 |\n+--------------------------+\n\n+---------------------------+\n|count(DISTINCT MAGauthorId)|\n+---------------------------+\n|258127231                  |\n+---------------------------+\n\n+----------+-----------+-------------+--------------------+----------+--------------------+\n|MAGpaperId|MAGauthorId|affiliationId|authorSequenceNumber|S2authorId|           S2paperId|\n+----------+-----------+-------------+--------------------+----------+--------------------+\n|   2256735| 2123292459|         null|                   3|  34500706|893ab65873acf4ea7...|\n|   2256427| 2657408789|         null|                   1|  94839152|e5725d36113794257...|\n|   2255007| 2046440042|         null|                   1|      null|                null|\n|   5365974| 1159491402|         null|                   3|  96168803|f21e376cbaf2bdfdb...|\n|   5364942| 2692433392|         null|                   1|  13058996|9ddf923283c05282c...|\n|   5368942| 2147127826|   1280527723|                   2|      null|                null|\n|   5363227| 2656047705|         null|                   1| 102370015|a9090f1a03c7707c7...|\n|   8575627| 2718021196|         null|                   1| 115737526|32b3252af3bbd638d...|\n|   8578446| 2719212326|         null|                   4|  48371938|e35a64609ac2059f3...|\n|   8575304| 2154328982|         null|                   2| 145026931|fd2442f7393cf649c...|\n|  14903071| 2156178794|         null|                   1| 144260253|fc793f1f50e15ea05...|\n|  14904768| 1986927034|         null|                   1|  50318863|e3b87a165383301c8...|\n|  14902604| 2724545588|         null|                   1| 135257711|976ae90b592de944c...|\n|  14900795| 2213038480|         null|                   5|   2886859|f43ba2e189435c5a8...|\n|  14900885| 2137219327|    165690674|                   1|   5334859|15222f98edca709f0...|\n|  14905300| 1989737588|         null|                   3|  46539538|cf6ccf85cc8ff732d...|\n|  14901123| 2481459642|         null|                   1|      null|                null|\n|  14901123| 2629246837|         null|                   2|      null|                null|\n|  18032892| 2304025315|         null|                   2|  15602239|ca6c45e7cc7ce6083...|\n|  18034051| 2036233860|         null|                   1| 119120210|29ada1014056b7e02...|\n+----------+-----------+-------------+--------------------+----------+--------------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mPKGinitdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m \u003d [MAGpaperId: bigint, MAGauthorId: bigint ... 4 more fields]\n\u001b[1m\u001b[34mpaperIdsdf3\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [count(DISTINCT MAGpaperId): bigint]\n\u001b[1m\u001b[34mauthorIdsdf3\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [count(DISTINCT MAGauthorId): bigint]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d20"
            },
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d21"
            },
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d22"
            },
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d23"
            },
            {
              "jobUrl": "http://192.168.2.5:4040/jobs/job?id\u003d24"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1606060994366_122591239",
      "id": "paragraph_1606060994366_122591239",
      "dateCreated": "2020-11-22 18:03:14.366",
      "dateStarted": "2020-11-22 18:04:36.524",
      "dateFinished": "2020-11-22 18:13:26.424",
      "status": "FINISHED"
    }
  ],
  "name": "Match_S2_MAG_ORCiD",
  "id": "2FQRWCV2A",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}